ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_ADC_Init,"ax",%progbits
  16              		.align	1
  17              		.global	MX_ADC_Init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_ADC_Init:
  24              	.LFB37:
  25              		.file 1 "Core/Src/adc.c"
   1:Core/Src/adc.c **** /**
   2:Core/Src/adc.c ****   ******************************************************************************
   3:Core/Src/adc.c ****   * File Name          : ADC.c
   4:Core/Src/adc.c ****   * Description        : This file provides code for the configuration
   5:Core/Src/adc.c ****   *                      of the ADC instances.
   6:Core/Src/adc.c ****   ******************************************************************************
   7:Core/Src/adc.c ****   * @attention
   8:Core/Src/adc.c ****   *
   9:Core/Src/adc.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/adc.c ****   * All rights reserved.</center></h2>
  11:Core/Src/adc.c ****   *
  12:Core/Src/adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/adc.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/adc.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/adc.c ****   *
  17:Core/Src/adc.c ****   ******************************************************************************
  18:Core/Src/adc.c ****   */
  19:Core/Src/adc.c **** 
  20:Core/Src/adc.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/adc.c **** #include "adc.h"
  22:Core/Src/adc.c **** 
  23:Core/Src/adc.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/adc.c **** 
  25:Core/Src/adc.c **** /* USER CODE END 0 */
  26:Core/Src/adc.c **** 
  27:Core/Src/adc.c **** ADC_HandleTypeDef hadc;
  28:Core/Src/adc.c **** DMA_HandleTypeDef hdma_adc;
  29:Core/Src/adc.c **** 
  30:Core/Src/adc.c **** /* ADC init function */
  31:Core/Src/adc.c **** void MX_ADC_Init(void)
  32:Core/Src/adc.c **** {
  26              		.loc 1 32 0
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 2


  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 00B5     		push	{lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 14, -4
  34 0002 85B0     		sub	sp, sp, #20
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 24
  33:Core/Src/adc.c ****   ADC_ChannelConfTypeDef sConfig = {0};
  37              		.loc 1 33 0
  38 0004 0C22     		movs	r2, #12
  39 0006 0021     		movs	r1, #0
  40 0008 01A8     		add	r0, sp, #4
  41 000a FFF7FEFF 		bl	memset
  42              	.LVL0:
  34:Core/Src/adc.c **** 
  35:Core/Src/adc.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
  36:Core/Src/adc.c ****   */
  37:Core/Src/adc.c ****   hadc.Instance = ADC1;
  43              		.loc 1 37 0
  44 000e 2948     		ldr	r0, .L12
  45 0010 294B     		ldr	r3, .L12+4
  46 0012 0360     		str	r3, [r0]
  38:Core/Src/adc.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  47              		.loc 1 38 0
  48 0014 8023     		movs	r3, #128
  49 0016 1B06     		lsls	r3, r3, #24
  50 0018 4360     		str	r3, [r0, #4]
  39:Core/Src/adc.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
  51              		.loc 1 39 0
  52 001a 0023     		movs	r3, #0
  53 001c 8360     		str	r3, [r0, #8]
  40:Core/Src/adc.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  54              		.loc 1 40 0
  55 001e C360     		str	r3, [r0, #12]
  41:Core/Src/adc.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_BACKWARD;
  56              		.loc 1 41 0
  57 0020 0222     		movs	r2, #2
  58 0022 0261     		str	r2, [r0, #16]
  42:Core/Src/adc.c ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  59              		.loc 1 42 0
  60 0024 0632     		adds	r2, r2, #6
  61 0026 4261     		str	r2, [r0, #20]
  43:Core/Src/adc.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
  62              		.loc 1 43 0
  63 0028 8361     		str	r3, [r0, #24]
  44:Core/Src/adc.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
  64              		.loc 1 44 0
  65 002a C361     		str	r3, [r0, #28]
  45:Core/Src/adc.c ****   hadc.Init.ContinuousConvMode = DISABLE;
  66              		.loc 1 45 0
  67 002c 0362     		str	r3, [r0, #32]
  46:Core/Src/adc.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
  68              		.loc 1 46 0
  69 002e 4362     		str	r3, [r0, #36]
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 3


  47:Core/Src/adc.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  70              		.loc 1 47 0
  71 0030 C222     		movs	r2, #194
  72 0032 FF32     		adds	r2, r2, #255
  73 0034 8262     		str	r2, [r0, #40]
  48:Core/Src/adc.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  74              		.loc 1 48 0
  75 0036 C362     		str	r3, [r0, #44]
  49:Core/Src/adc.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
  76              		.loc 1 49 0
  77 0038 0363     		str	r3, [r0, #48]
  50:Core/Src/adc.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  78              		.loc 1 50 0
  79 003a 0133     		adds	r3, r3, #1
  80 003c 4363     		str	r3, [r0, #52]
  51:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
  81              		.loc 1 51 0
  82 003e FFF7FEFF 		bl	HAL_ADC_Init
  83              	.LVL1:
  84 0042 0028     		cmp	r0, #0
  85 0044 26D1     		bne	.L7
  86              	.L2:
  52:Core/Src/adc.c ****   {
  53:Core/Src/adc.c ****     Error_Handler();
  54:Core/Src/adc.c ****   }
  55:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted. 
  56:Core/Src/adc.c ****   */
  57:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_4;
  87              		.loc 1 57 0
  88 0046 0423     		movs	r3, #4
  89 0048 0193     		str	r3, [sp, #4]
  58:Core/Src/adc.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  90              		.loc 1 58 0
  91 004a 8023     		movs	r3, #128
  92 004c 5B01     		lsls	r3, r3, #5
  93 004e 0293     		str	r3, [sp, #8]
  59:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  94              		.loc 1 59 0
  95 0050 0323     		movs	r3, #3
  96 0052 0393     		str	r3, [sp, #12]
  60:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  97              		.loc 1 60 0
  98 0054 01A9     		add	r1, sp, #4
  99 0056 1748     		ldr	r0, .L12
 100 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 101              	.LVL2:
 102 005c 0028     		cmp	r0, #0
 103 005e 1CD1     		bne	.L8
 104              	.L3:
  61:Core/Src/adc.c ****   {
  62:Core/Src/adc.c ****     Error_Handler();
  63:Core/Src/adc.c ****   }
  64:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted. 
  65:Core/Src/adc.c ****   */
  66:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_5;
 105              		.loc 1 66 0
 106 0060 0523     		movs	r3, #5
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 4


 107 0062 0193     		str	r3, [sp, #4]
  67:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 108              		.loc 1 67 0
 109 0064 01A9     		add	r1, sp, #4
 110 0066 1348     		ldr	r0, .L12
 111 0068 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 112              	.LVL3:
 113 006c 0028     		cmp	r0, #0
 114 006e 17D1     		bne	.L9
 115              	.L4:
  68:Core/Src/adc.c ****   {
  69:Core/Src/adc.c ****     Error_Handler();
  70:Core/Src/adc.c ****   }
  71:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted. 
  72:Core/Src/adc.c ****   */
  73:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_6;
 116              		.loc 1 73 0
 117 0070 0623     		movs	r3, #6
 118 0072 0193     		str	r3, [sp, #4]
  74:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 119              		.loc 1 74 0
 120 0074 01A9     		add	r1, sp, #4
 121 0076 0F48     		ldr	r0, .L12
 122 0078 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 123              	.LVL4:
 124 007c 0028     		cmp	r0, #0
 125 007e 12D1     		bne	.L10
 126              	.L5:
  75:Core/Src/adc.c ****   {
  76:Core/Src/adc.c ****     Error_Handler();
  77:Core/Src/adc.c ****   }
  78:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted. 
  79:Core/Src/adc.c ****   */
  80:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_7;
 127              		.loc 1 80 0
 128 0080 0723     		movs	r3, #7
 129 0082 0193     		str	r3, [sp, #4]
  81:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 130              		.loc 1 81 0
 131 0084 01A9     		add	r1, sp, #4
 132 0086 0B48     		ldr	r0, .L12
 133 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 134              	.LVL5:
 135 008c 0028     		cmp	r0, #0
 136 008e 0DD1     		bne	.L11
 137              	.L1:
  82:Core/Src/adc.c ****   {
  83:Core/Src/adc.c ****     Error_Handler();
  84:Core/Src/adc.c ****   }
  85:Core/Src/adc.c **** 
  86:Core/Src/adc.c **** }
 138              		.loc 1 86 0
 139 0090 05B0     		add	sp, sp, #20
 140              		@ sp needed
 141 0092 00BD     		pop	{pc}
 142              	.L7:
  53:Core/Src/adc.c ****   }
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 5


 143              		.loc 1 53 0
 144 0094 FFF7FEFF 		bl	Error_Handler
 145              	.LVL6:
 146 0098 D5E7     		b	.L2
 147              	.L8:
  62:Core/Src/adc.c ****   }
 148              		.loc 1 62 0
 149 009a FFF7FEFF 		bl	Error_Handler
 150              	.LVL7:
 151 009e DFE7     		b	.L3
 152              	.L9:
  69:Core/Src/adc.c ****   }
 153              		.loc 1 69 0
 154 00a0 FFF7FEFF 		bl	Error_Handler
 155              	.LVL8:
 156 00a4 E4E7     		b	.L4
 157              	.L10:
  76:Core/Src/adc.c ****   }
 158              		.loc 1 76 0
 159 00a6 FFF7FEFF 		bl	Error_Handler
 160              	.LVL9:
 161 00aa E9E7     		b	.L5
 162              	.L11:
  83:Core/Src/adc.c ****   }
 163              		.loc 1 83 0
 164 00ac FFF7FEFF 		bl	Error_Handler
 165              	.LVL10:
 166              		.loc 1 86 0
 167 00b0 EEE7     		b	.L1
 168              	.L13:
 169 00b2 C046     		.align	2
 170              	.L12:
 171 00b4 00000000 		.word	hadc
 172 00b8 00240140 		.word	1073816576
 173              		.cfi_endproc
 174              	.LFE37:
 176              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 177              		.align	1
 178              		.global	HAL_ADC_MspInit
 179              		.syntax unified
 180              		.code	16
 181              		.thumb_func
 182              		.fpu softvfp
 184              	HAL_ADC_MspInit:
 185              	.LFB38:
  87:Core/Src/adc.c **** 
  88:Core/Src/adc.c **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
  89:Core/Src/adc.c **** {
 186              		.loc 1 89 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 32
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL11:
 191 0000 10B5     		push	{r4, lr}
 192              	.LCFI2:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 4, -8
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 6


 195              		.cfi_offset 14, -4
 196 0002 88B0     		sub	sp, sp, #32
 197              	.LCFI3:
 198              		.cfi_def_cfa_offset 40
 199 0004 0400     		movs	r4, r0
  90:Core/Src/adc.c **** 
  91:Core/Src/adc.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 200              		.loc 1 91 0
 201 0006 1422     		movs	r2, #20
 202 0008 0021     		movs	r1, #0
 203 000a 03A8     		add	r0, sp, #12
 204              	.LVL12:
 205 000c FFF7FEFF 		bl	memset
 206              	.LVL13:
  92:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 207              		.loc 1 92 0
 208 0010 1F4B     		ldr	r3, .L19
 209 0012 2268     		ldr	r2, [r4]
 210 0014 9A42     		cmp	r2, r3
 211 0016 01D0     		beq	.L17
 212              	.L14:
  93:Core/Src/adc.c ****   {
  94:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 0 */
  95:Core/Src/adc.c **** 
  96:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 0 */
  97:Core/Src/adc.c ****     /* ADC1 clock enable */
  98:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_ENABLE();
  99:Core/Src/adc.c ****   
 100:Core/Src/adc.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 101:Core/Src/adc.c ****     /**ADC GPIO Configuration    
 102:Core/Src/adc.c ****     PA4     ------> ADC_IN4
 103:Core/Src/adc.c ****     PA5     ------> ADC_IN5
 104:Core/Src/adc.c ****     PA6     ------> ADC_IN6
 105:Core/Src/adc.c ****     PA7     ------> ADC_IN7 
 106:Core/Src/adc.c ****     */
 107:Core/Src/adc.c ****     GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 108:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 109:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 110:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 111:Core/Src/adc.c **** 
 112:Core/Src/adc.c ****     /* ADC1 DMA Init */
 113:Core/Src/adc.c ****     /* ADC Init */
 114:Core/Src/adc.c ****     hdma_adc.Instance = DMA1_Channel1;
 115:Core/Src/adc.c ****     hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 116:Core/Src/adc.c ****     hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 117:Core/Src/adc.c ****     hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 118:Core/Src/adc.c ****     hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 119:Core/Src/adc.c ****     hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 120:Core/Src/adc.c ****     hdma_adc.Init.Mode = DMA_CIRCULAR;
 121:Core/Src/adc.c ****     hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 122:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 123:Core/Src/adc.c ****     {
 124:Core/Src/adc.c ****       Error_Handler();
 125:Core/Src/adc.c ****     }
 126:Core/Src/adc.c **** 
 127:Core/Src/adc.c ****     __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 128:Core/Src/adc.c **** 
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 7


 129:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 1 */
 130:Core/Src/adc.c **** 
 131:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 1 */
 132:Core/Src/adc.c ****   }
 133:Core/Src/adc.c **** }
 213              		.loc 1 133 0
 214 0018 08B0     		add	sp, sp, #32
 215              		@ sp needed
 216              	.LVL14:
 217 001a 10BD     		pop	{r4, pc}
 218              	.LVL15:
 219              	.L17:
 220              	.LBB2:
  98:Core/Src/adc.c ****   
 221              		.loc 1 98 0
 222 001c 1D4B     		ldr	r3, .L19+4
 223 001e 9969     		ldr	r1, [r3, #24]
 224 0020 8020     		movs	r0, #128
 225 0022 8000     		lsls	r0, r0, #2
 226 0024 0143     		orrs	r1, r0
 227 0026 9961     		str	r1, [r3, #24]
 228 0028 9A69     		ldr	r2, [r3, #24]
 229 002a 0240     		ands	r2, r0
 230 002c 0192     		str	r2, [sp, #4]
 231 002e 019A     		ldr	r2, [sp, #4]
 232              	.LBE2:
 233              	.LBB3:
 100:Core/Src/adc.c ****     /**ADC GPIO Configuration    
 234              		.loc 1 100 0
 235 0030 5A69     		ldr	r2, [r3, #20]
 236 0032 8021     		movs	r1, #128
 237 0034 8902     		lsls	r1, r1, #10
 238 0036 0A43     		orrs	r2, r1
 239 0038 5A61     		str	r2, [r3, #20]
 240 003a 5B69     		ldr	r3, [r3, #20]
 241 003c 0B40     		ands	r3, r1
 242 003e 0293     		str	r3, [sp, #8]
 243 0040 029B     		ldr	r3, [sp, #8]
 244              	.LBE3:
 107:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 245              		.loc 1 107 0
 246 0042 F023     		movs	r3, #240
 247 0044 0393     		str	r3, [sp, #12]
 108:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 248              		.loc 1 108 0
 249 0046 ED3B     		subs	r3, r3, #237
 250 0048 0493     		str	r3, [sp, #16]
 110:Core/Src/adc.c **** 
 251              		.loc 1 110 0
 252 004a 7138     		subs	r0, r0, #113
 253 004c FF38     		subs	r0, r0, #255
 254 004e 03A9     		add	r1, sp, #12
 255 0050 C005     		lsls	r0, r0, #23
 256 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL16:
 114:Core/Src/adc.c ****     hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 258              		.loc 1 114 0
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 8


 259 0056 1048     		ldr	r0, .L19+8
 260 0058 104B     		ldr	r3, .L19+12
 261 005a 0360     		str	r3, [r0]
 115:Core/Src/adc.c ****     hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 262              		.loc 1 115 0
 263 005c 0023     		movs	r3, #0
 264 005e 4360     		str	r3, [r0, #4]
 116:Core/Src/adc.c ****     hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 265              		.loc 1 116 0
 266 0060 8360     		str	r3, [r0, #8]
 117:Core/Src/adc.c ****     hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 267              		.loc 1 117 0
 268 0062 8033     		adds	r3, r3, #128
 269 0064 C360     		str	r3, [r0, #12]
 118:Core/Src/adc.c ****     hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 270              		.loc 1 118 0
 271 0066 8033     		adds	r3, r3, #128
 272 0068 0361     		str	r3, [r0, #16]
 119:Core/Src/adc.c ****     hdma_adc.Init.Mode = DMA_CIRCULAR;
 273              		.loc 1 119 0
 274 006a 8023     		movs	r3, #128
 275 006c DB00     		lsls	r3, r3, #3
 276 006e 4361     		str	r3, [r0, #20]
 120:Core/Src/adc.c ****     hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 277              		.loc 1 120 0
 278 0070 2023     		movs	r3, #32
 279 0072 8361     		str	r3, [r0, #24]
 121:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 280              		.loc 1 121 0
 281 0074 8023     		movs	r3, #128
 282 0076 5B01     		lsls	r3, r3, #5
 283 0078 C361     		str	r3, [r0, #28]
 122:Core/Src/adc.c ****     {
 284              		.loc 1 122 0
 285 007a FFF7FEFF 		bl	HAL_DMA_Init
 286              	.LVL17:
 287 007e 0028     		cmp	r0, #0
 288 0080 03D1     		bne	.L18
 289              	.L16:
 127:Core/Src/adc.c **** 
 290              		.loc 1 127 0
 291 0082 054B     		ldr	r3, .L19+8
 292 0084 E363     		str	r3, [r4, #60]
 293 0086 5C62     		str	r4, [r3, #36]
 294              		.loc 1 133 0
 295 0088 C6E7     		b	.L14
 296              	.L18:
 124:Core/Src/adc.c ****     }
 297              		.loc 1 124 0
 298 008a FFF7FEFF 		bl	Error_Handler
 299              	.LVL18:
 300 008e F8E7     		b	.L16
 301              	.L20:
 302              		.align	2
 303              	.L19:
 304 0090 00240140 		.word	1073816576
 305 0094 00100240 		.word	1073876992
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 9


 306 0098 00000000 		.word	hdma_adc
 307 009c 08000240 		.word	1073872904
 308              		.cfi_endproc
 309              	.LFE38:
 311              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 312              		.align	1
 313              		.global	HAL_ADC_MspDeInit
 314              		.syntax unified
 315              		.code	16
 316              		.thumb_func
 317              		.fpu softvfp
 319              	HAL_ADC_MspDeInit:
 320              	.LFB39:
 134:Core/Src/adc.c **** 
 135:Core/Src/adc.c **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 136:Core/Src/adc.c **** {
 321              		.loc 1 136 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              	.LVL19:
 326 0000 10B5     		push	{r4, lr}
 327              	.LCFI4:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 4, -8
 330              		.cfi_offset 14, -4
 331 0002 0400     		movs	r4, r0
 137:Core/Src/adc.c **** 
 138:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 332              		.loc 1 138 0
 333 0004 0A4B     		ldr	r3, .L24
 334 0006 0268     		ldr	r2, [r0]
 335 0008 9A42     		cmp	r2, r3
 336 000a 00D0     		beq	.L23
 337              	.LVL20:
 338              	.L21:
 139:Core/Src/adc.c ****   {
 140:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 141:Core/Src/adc.c **** 
 142:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 0 */
 143:Core/Src/adc.c ****     /* Peripheral clock disable */
 144:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_DISABLE();
 145:Core/Src/adc.c ****   
 146:Core/Src/adc.c ****     /**ADC GPIO Configuration    
 147:Core/Src/adc.c ****     PA4     ------> ADC_IN4
 148:Core/Src/adc.c ****     PA5     ------> ADC_IN5
 149:Core/Src/adc.c ****     PA6     ------> ADC_IN6
 150:Core/Src/adc.c ****     PA7     ------> ADC_IN7 
 151:Core/Src/adc.c ****     */
 152:Core/Src/adc.c ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 153:Core/Src/adc.c **** 
 154:Core/Src/adc.c ****     /* ADC1 DMA DeInit */
 155:Core/Src/adc.c ****     HAL_DMA_DeInit(adcHandle->DMA_Handle);
 156:Core/Src/adc.c **** 
 157:Core/Src/adc.c ****     /* ADC1 interrupt Deinit */
 158:Core/Src/adc.c ****     HAL_NVIC_DisableIRQ(ADC1_IRQn);
 159:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 10


 160:Core/Src/adc.c **** 
 161:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 1 */
 162:Core/Src/adc.c ****   }
 163:Core/Src/adc.c **** } 
 339              		.loc 1 163 0
 340              		@ sp needed
 341              	.LVL21:
 342 000c 10BD     		pop	{r4, pc}
 343              	.LVL22:
 344              	.L23:
 144:Core/Src/adc.c ****   
 345              		.loc 1 144 0
 346 000e 094A     		ldr	r2, .L24+4
 347 0010 9369     		ldr	r3, [r2, #24]
 348 0012 0949     		ldr	r1, .L24+8
 349 0014 0B40     		ands	r3, r1
 350 0016 9361     		str	r3, [r2, #24]
 152:Core/Src/adc.c **** 
 351              		.loc 1 152 0
 352 0018 9020     		movs	r0, #144
 353              	.LVL23:
 354 001a F021     		movs	r1, #240
 355 001c C005     		lsls	r0, r0, #23
 356 001e FFF7FEFF 		bl	HAL_GPIO_DeInit
 357              	.LVL24:
 155:Core/Src/adc.c **** 
 358              		.loc 1 155 0
 359 0022 E06B     		ldr	r0, [r4, #60]
 360 0024 FFF7FEFF 		bl	HAL_DMA_DeInit
 361              	.LVL25:
 158:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 362              		.loc 1 158 0
 363 0028 0C20     		movs	r0, #12
 364 002a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 365              	.LVL26:
 366              		.loc 1 163 0
 367 002e EDE7     		b	.L21
 368              	.L25:
 369              		.align	2
 370              	.L24:
 371 0030 00240140 		.word	1073816576
 372 0034 00100240 		.word	1073876992
 373 0038 FFFDFFFF 		.word	-513
 374              		.cfi_endproc
 375              	.LFE39:
 377              		.comm	hdma_adc,68,4
 378              		.comm	hadc,76,4
 379              		.text
 380              	.Letext0:
 381              		.file 2 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 382              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 383              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 384              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 385              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 386              		.file 7 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 387              		.file 8 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 388              		.file 9 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 11


 389              		.file 10 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 390              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 391              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 392              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 393              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 394              		.file 15 "Core/Inc/adc.h"
 395              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 396              		.file 17 "Core/Inc/main.h"
 397              		.file 18 "<built-in>"
ARM GAS  E:\cygwin64\tmp\ccLr4Mn9.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
E:\cygwin64\tmp\ccLr4Mn9.s:16     .text.MX_ADC_Init:00000000 $t
E:\cygwin64\tmp\ccLr4Mn9.s:23     .text.MX_ADC_Init:00000000 MX_ADC_Init
E:\cygwin64\tmp\ccLr4Mn9.s:171    .text.MX_ADC_Init:000000b4 $d
                            *COM*:0000004c hadc
E:\cygwin64\tmp\ccLr4Mn9.s:177    .text.HAL_ADC_MspInit:00000000 $t
E:\cygwin64\tmp\ccLr4Mn9.s:184    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
E:\cygwin64\tmp\ccLr4Mn9.s:304    .text.HAL_ADC_MspInit:00000090 $d
                            *COM*:00000044 hdma_adc
E:\cygwin64\tmp\ccLr4Mn9.s:312    .text.HAL_ADC_MspDeInit:00000000 $t
E:\cygwin64\tmp\ccLr4Mn9.s:319    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
E:\cygwin64\tmp\ccLr4Mn9.s:371    .text.HAL_ADC_MspDeInit:00000030 $d

UNDEFINED SYMBOLS
memset
HAL_ADC_Init
HAL_ADC_ConfigChannel
Error_Handler
HAL_GPIO_Init
HAL_DMA_Init
HAL_GPIO_DeInit
HAL_DMA_DeInit
HAL_NVIC_DisableIRQ
