ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB37:
  25              		.file 1 "Core/Src/stm32f0xx_it.c"
   1:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f0xx_it.c **** /**
   3:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Core/Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f0xx_it.c ****   * @attention
   8:Core/Src/stm32f0xx_it.c ****   *
   9:Core/Src/stm32f0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Core/Src/stm32f0xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f0xx_it.c ****   *
  12:Core/Src/stm32f0xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32f0xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32f0xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32f0xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32f0xx_it.c ****   *
  17:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f0xx_it.c ****   */
  19:Core/Src/stm32f0xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f0xx_it.c **** 
  21:Core/Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f0xx_it.c **** #include "main.h"
  23:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  24:Core/Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f0xx_it.c **** 
  28:Core/Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f0xx_it.c **** 
  31:Core/Src/stm32f0xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f0xx_it.c **** 
  33:Core/Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 2


  34:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f0xx_it.c ****  
  36:Core/Src/stm32f0xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f0xx_it.c **** 
  38:Core/Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f0xx_it.c **** 
  41:Core/Src/stm32f0xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f0xx_it.c **** 
  43:Core/Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f0xx_it.c **** 
  46:Core/Src/stm32f0xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f0xx_it.c **** 
  48:Core/Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f0xx_it.c **** 
  51:Core/Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f0xx_it.c **** 
  53:Core/Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f0xx_it.c **** 
  56:Core/Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f0xx_it.c **** 
  58:Core/Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_adc;
  60:Core/Src/stm32f0xx_it.c **** extern ADC_HandleTypeDef hadc;
  61:Core/Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim1;
  62:Core/Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim2;
  63:Core/Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  64:Core/Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  65:Core/Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  66:Core/Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart1;
  67:Core/Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart2;
  68:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  69:Core/Src/stm32f0xx_it.c **** 
  70:Core/Src/stm32f0xx_it.c **** /* USER CODE END EV */
  71:Core/Src/stm32f0xx_it.c **** 
  72:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  73:Core/Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */ 
  74:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  75:Core/Src/stm32f0xx_it.c **** /**
  76:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  77:Core/Src/stm32f0xx_it.c ****   */
  78:Core/Src/stm32f0xx_it.c **** void NMI_Handler(void)
  79:Core/Src/stm32f0xx_it.c **** {
  26              		.loc 1 79 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  80:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  81:Core/Src/stm32f0xx_it.c **** 
  82:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  83:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  84:Core/Src/stm32f0xx_it.c **** 
  85:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 3


  86:Core/Src/stm32f0xx_it.c **** }
  31              		.loc 1 86 0
  32              		@ sp needed
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE37:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.code	16
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
  46              	.LFB38:
  87:Core/Src/stm32f0xx_it.c **** 
  88:Core/Src/stm32f0xx_it.c **** /**
  89:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  90:Core/Src/stm32f0xx_it.c ****   */
  91:Core/Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  92:Core/Src/stm32f0xx_it.c **** {
  47              		.loc 1 92 0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  54 0000 FEE7     		b	.L3
  55              		.cfi_endproc
  56              	.LFE38:
  58              		.section	.text.SVC_Handler,"ax",%progbits
  59              		.align	1
  60              		.global	SVC_Handler
  61              		.syntax unified
  62              		.code	16
  63              		.thumb_func
  64              		.fpu softvfp
  66              	SVC_Handler:
  67              	.LFB39:
  93:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  94:Core/Src/stm32f0xx_it.c **** 
  95:Core/Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  96:Core/Src/stm32f0xx_it.c ****   while (1)
  97:Core/Src/stm32f0xx_it.c ****   {
  98:Core/Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  99:Core/Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 100:Core/Src/stm32f0xx_it.c ****   }
 101:Core/Src/stm32f0xx_it.c **** }
 102:Core/Src/stm32f0xx_it.c **** 
 103:Core/Src/stm32f0xx_it.c **** /**
 104:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 105:Core/Src/stm32f0xx_it.c ****   */
 106:Core/Src/stm32f0xx_it.c **** void SVC_Handler(void)
 107:Core/Src/stm32f0xx_it.c **** {
  68              		.loc 1 107 0
  69              		.cfi_startproc
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 4


  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
 108:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 109:Core/Src/stm32f0xx_it.c **** 
 110:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 111:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 112:Core/Src/stm32f0xx_it.c **** 
 113:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 114:Core/Src/stm32f0xx_it.c **** }
  73              		.loc 1 114 0
  74              		@ sp needed
  75 0000 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE39:
  79              		.section	.text.PendSV_Handler,"ax",%progbits
  80              		.align	1
  81              		.global	PendSV_Handler
  82              		.syntax unified
  83              		.code	16
  84              		.thumb_func
  85              		.fpu softvfp
  87              	PendSV_Handler:
  88              	.LFB40:
 115:Core/Src/stm32f0xx_it.c **** 
 116:Core/Src/stm32f0xx_it.c **** /**
 117:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 118:Core/Src/stm32f0xx_it.c ****   */
 119:Core/Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 120:Core/Src/stm32f0xx_it.c **** {
  89              		.loc 1 120 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
 121:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 122:Core/Src/stm32f0xx_it.c **** 
 123:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 124:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 125:Core/Src/stm32f0xx_it.c **** 
 126:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 127:Core/Src/stm32f0xx_it.c **** }
  94              		.loc 1 127 0
  95              		@ sp needed
  96 0000 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE40:
 100              		.section	.text.SysTick_Handler,"ax",%progbits
 101              		.align	1
 102              		.global	SysTick_Handler
 103              		.syntax unified
 104              		.code	16
 105              		.thumb_func
 106              		.fpu softvfp
 108              	SysTick_Handler:
 109              	.LFB41:
 128:Core/Src/stm32f0xx_it.c **** 
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 5


 129:Core/Src/stm32f0xx_it.c **** /**
 130:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 131:Core/Src/stm32f0xx_it.c ****   */
 132:Core/Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 133:Core/Src/stm32f0xx_it.c **** {
 110              		.loc 1 133 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 10B5     		push	{r4, lr}
 115              	.LCFI0:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 134:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 135:Core/Src/stm32f0xx_it.c **** 
 136:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 137:Core/Src/stm32f0xx_it.c ****   HAL_IncTick();
 119              		.loc 1 137 0
 120 0002 FFF7FEFF 		bl	HAL_IncTick
 121              	.LVL0:
 138:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 139:Core/Src/stm32f0xx_it.c ****   SysTick_CallBack();
 122              		.loc 1 139 0
 123 0006 FFF7FEFF 		bl	SysTick_CallBack
 124              	.LVL1:
 140:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 141:Core/Src/stm32f0xx_it.c **** }
 125              		.loc 1 141 0
 126              		@ sp needed
 127 000a 10BD     		pop	{r4, pc}
 128              		.cfi_endproc
 129              	.LFE41:
 131              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 132              		.align	1
 133              		.global	DMA1_Channel1_IRQHandler
 134              		.syntax unified
 135              		.code	16
 136              		.thumb_func
 137              		.fpu softvfp
 139              	DMA1_Channel1_IRQHandler:
 140              	.LFB42:
 142:Core/Src/stm32f0xx_it.c **** 
 143:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 144:Core/Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 145:Core/Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 146:Core/Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 147:Core/Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 148:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 149:Core/Src/stm32f0xx_it.c **** 
 150:Core/Src/stm32f0xx_it.c **** /**
 151:Core/Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 1 interrupt.
 152:Core/Src/stm32f0xx_it.c ****   */
 153:Core/Src/stm32f0xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 154:Core/Src/stm32f0xx_it.c **** {
 141              		.loc 1 154 0
 142              		.cfi_startproc
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 6


 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 10B5     		push	{r4, lr}
 146              	.LCFI1:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 4, -8
 149              		.cfi_offset 14, -4
 155:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 156:Core/Src/stm32f0xx_it.c **** 
 157:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 158:Core/Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc);
 150              		.loc 1 158 0
 151 0002 0248     		ldr	r0, .L8
 152 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 153              	.LVL2:
 159:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 160:Core/Src/stm32f0xx_it.c **** 
 161:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 162:Core/Src/stm32f0xx_it.c **** }
 154              		.loc 1 162 0
 155              		@ sp needed
 156 0008 10BD     		pop	{r4, pc}
 157              	.L9:
 158 000a C046     		.align	2
 159              	.L8:
 160 000c 00000000 		.word	hdma_adc
 161              		.cfi_endproc
 162              	.LFE42:
 164              		.section	.text.DMA1_Channel2_3_IRQHandler,"ax",%progbits
 165              		.align	1
 166              		.global	DMA1_Channel2_3_IRQHandler
 167              		.syntax unified
 168              		.code	16
 169              		.thumb_func
 170              		.fpu softvfp
 172              	DMA1_Channel2_3_IRQHandler:
 173              	.LFB43:
 163:Core/Src/stm32f0xx_it.c **** 
 164:Core/Src/stm32f0xx_it.c **** /**
 165:Core/Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 2 and 3 interrupts.
 166:Core/Src/stm32f0xx_it.c ****   */
 167:Core/Src/stm32f0xx_it.c **** void DMA1_Channel2_3_IRQHandler(void)
 168:Core/Src/stm32f0xx_it.c **** {
 174              		.loc 1 168 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178 0000 10B5     		push	{r4, lr}
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 4, -8
 182              		.cfi_offset 14, -4
 169:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
 170:Core/Src/stm32f0xx_it.c **** 
 171:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel2_3_IRQn 0 */
 172:Core/Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 183              		.loc 1 172 0
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 7


 184 0002 0348     		ldr	r0, .L11
 185 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 186              	.LVL3:
 173:Core/Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 187              		.loc 1 173 0
 188 0008 0248     		ldr	r0, .L11+4
 189 000a FFF7FEFF 		bl	HAL_DMA_IRQHandler
 190              	.LVL4:
 174:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
 175:Core/Src/stm32f0xx_it.c **** 
 176:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel2_3_IRQn 1 */
 177:Core/Src/stm32f0xx_it.c **** }
 191              		.loc 1 177 0
 192              		@ sp needed
 193 000e 10BD     		pop	{r4, pc}
 194              	.L12:
 195              		.align	2
 196              	.L11:
 197 0010 00000000 		.word	hdma_usart1_tx
 198 0014 00000000 		.word	hdma_usart1_rx
 199              		.cfi_endproc
 200              	.LFE43:
 202              		.section	.text.DMA1_Channel4_5_IRQHandler,"ax",%progbits
 203              		.align	1
 204              		.global	DMA1_Channel4_5_IRQHandler
 205              		.syntax unified
 206              		.code	16
 207              		.thumb_func
 208              		.fpu softvfp
 210              	DMA1_Channel4_5_IRQHandler:
 211              	.LFB44:
 178:Core/Src/stm32f0xx_it.c **** 
 179:Core/Src/stm32f0xx_it.c **** /**
 180:Core/Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 4 and 5 interrupts.
 181:Core/Src/stm32f0xx_it.c ****   */
 182:Core/Src/stm32f0xx_it.c **** void DMA1_Channel4_5_IRQHandler(void)
 183:Core/Src/stm32f0xx_it.c **** {
 212              		.loc 1 183 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 4, -8
 220              		.cfi_offset 14, -4
 184:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */
 185:Core/Src/stm32f0xx_it.c **** 
 186:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel4_5_IRQn 0 */
 187:Core/Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 221              		.loc 1 187 0
 222 0002 0248     		ldr	r0, .L14
 223 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 224              	.LVL5:
 188:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
 189:Core/Src/stm32f0xx_it.c **** 
 190:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel4_5_IRQn 1 */
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 8


 191:Core/Src/stm32f0xx_it.c **** }
 225              		.loc 1 191 0
 226              		@ sp needed
 227 0008 10BD     		pop	{r4, pc}
 228              	.L15:
 229 000a C046     		.align	2
 230              	.L14:
 231 000c 00000000 		.word	hdma_usart2_tx
 232              		.cfi_endproc
 233              	.LFE44:
 235              		.section	.text.ADC1_IRQHandler,"ax",%progbits
 236              		.align	1
 237              		.global	ADC1_IRQHandler
 238              		.syntax unified
 239              		.code	16
 240              		.thumb_func
 241              		.fpu softvfp
 243              	ADC1_IRQHandler:
 244              	.LFB45:
 192:Core/Src/stm32f0xx_it.c **** 
 193:Core/Src/stm32f0xx_it.c **** /**
 194:Core/Src/stm32f0xx_it.c ****   * @brief This function handles ADC interrupt.
 195:Core/Src/stm32f0xx_it.c ****   */
 196:Core/Src/stm32f0xx_it.c **** void ADC1_IRQHandler(void)
 197:Core/Src/stm32f0xx_it.c **** {
 245              		.loc 1 197 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249 0000 10B5     		push	{r4, lr}
 250              	.LCFI4:
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 4, -8
 253              		.cfi_offset 14, -4
 198:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN ADC1_IRQn 0 */
 199:Core/Src/stm32f0xx_it.c **** 
 200:Core/Src/stm32f0xx_it.c ****   /* USER CODE END ADC1_IRQn 0 */
 201:Core/Src/stm32f0xx_it.c ****   HAL_ADC_IRQHandler(&hadc);
 254              		.loc 1 201 0
 255 0002 0248     		ldr	r0, .L17
 256 0004 FFF7FEFF 		bl	HAL_ADC_IRQHandler
 257              	.LVL6:
 202:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN ADC1_IRQn 1 */
 203:Core/Src/stm32f0xx_it.c **** 
 204:Core/Src/stm32f0xx_it.c ****   /* USER CODE END ADC1_IRQn 1 */
 205:Core/Src/stm32f0xx_it.c **** }
 258              		.loc 1 205 0
 259              		@ sp needed
 260 0008 10BD     		pop	{r4, pc}
 261              	.L18:
 262 000a C046     		.align	2
 263              	.L17:
 264 000c 00000000 		.word	hadc
 265              		.cfi_endproc
 266              	.LFE45:
 268              		.section	.text.TIM1_BRK_UP_TRG_COM_IRQHandler,"ax",%progbits
 269              		.align	1
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 9


 270              		.global	TIM1_BRK_UP_TRG_COM_IRQHandler
 271              		.syntax unified
 272              		.code	16
 273              		.thumb_func
 274              		.fpu softvfp
 276              	TIM1_BRK_UP_TRG_COM_IRQHandler:
 277              	.LFB46:
 206:Core/Src/stm32f0xx_it.c **** 
 207:Core/Src/stm32f0xx_it.c **** /**
 208:Core/Src/stm32f0xx_it.c ****   * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
 209:Core/Src/stm32f0xx_it.c ****   */
 210:Core/Src/stm32f0xx_it.c **** void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
 211:Core/Src/stm32f0xx_it.c **** {
 278              		.loc 1 211 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 10B5     		push	{r4, lr}
 283              	.LCFI5:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
 212:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
 213:Core/Src/stm32f0xx_it.c **** 
 214:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
 215:Core/Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 287              		.loc 1 215 0
 288 0002 0248     		ldr	r0, .L20
 289 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 290              	.LVL7:
 216:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
 217:Core/Src/stm32f0xx_it.c **** 
 218:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
 219:Core/Src/stm32f0xx_it.c **** }
 291              		.loc 1 219 0
 292              		@ sp needed
 293 0008 10BD     		pop	{r4, pc}
 294              	.L21:
 295 000a C046     		.align	2
 296              	.L20:
 297 000c 00000000 		.word	htim1
 298              		.cfi_endproc
 299              	.LFE46:
 301              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 302              		.align	1
 303              		.global	TIM2_IRQHandler
 304              		.syntax unified
 305              		.code	16
 306              		.thumb_func
 307              		.fpu softvfp
 309              	TIM2_IRQHandler:
 310              	.LFB47:
 220:Core/Src/stm32f0xx_it.c **** 
 221:Core/Src/stm32f0xx_it.c **** /**
 222:Core/Src/stm32f0xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 223:Core/Src/stm32f0xx_it.c ****   */
 224:Core/Src/stm32f0xx_it.c **** void TIM2_IRQHandler(void)
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 10


 225:Core/Src/stm32f0xx_it.c **** {
 311              		.loc 1 225 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315 0000 10B5     		push	{r4, lr}
 316              	.LCFI6:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 4, -8
 319              		.cfi_offset 14, -4
 226:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 227:Core/Src/stm32f0xx_it.c **** 
 228:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 229:Core/Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 320              		.loc 1 229 0
 321 0002 0248     		ldr	r0, .L23
 322 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 323              	.LVL8:
 230:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 231:Core/Src/stm32f0xx_it.c **** 
 232:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 233:Core/Src/stm32f0xx_it.c **** }
 324              		.loc 1 233 0
 325              		@ sp needed
 326 0008 10BD     		pop	{r4, pc}
 327              	.L24:
 328 000a C046     		.align	2
 329              	.L23:
 330 000c 00000000 		.word	htim2
 331              		.cfi_endproc
 332              	.LFE47:
 334              		.section	.text.USART1_IRQHandler,"ax",%progbits
 335              		.align	1
 336              		.global	USART1_IRQHandler
 337              		.syntax unified
 338              		.code	16
 339              		.thumb_func
 340              		.fpu softvfp
 342              	USART1_IRQHandler:
 343              	.LFB48:
 234:Core/Src/stm32f0xx_it.c **** 
 235:Core/Src/stm32f0xx_it.c **** /**
 236:Core/Src/stm32f0xx_it.c ****   * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI li
 237:Core/Src/stm32f0xx_it.c ****   */
 238:Core/Src/stm32f0xx_it.c **** void USART1_IRQHandler(void)
 239:Core/Src/stm32f0xx_it.c **** {
 344              		.loc 1 239 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348 0000 10B5     		push	{r4, lr}
 349              	.LCFI7:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 4, -8
 352              		.cfi_offset 14, -4
 240:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 241:Core/Src/stm32f0xx_it.c **** 
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 11


 242:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 243:Core/Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 353              		.loc 1 243 0
 354 0002 0248     		ldr	r0, .L26
 355 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 356              	.LVL9:
 244:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 245:Core/Src/stm32f0xx_it.c **** 
 246:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 247:Core/Src/stm32f0xx_it.c **** }
 357              		.loc 1 247 0
 358              		@ sp needed
 359 0008 10BD     		pop	{r4, pc}
 360              	.L27:
 361 000a C046     		.align	2
 362              	.L26:
 363 000c 00000000 		.word	huart1
 364              		.cfi_endproc
 365              	.LFE48:
 367              		.section	.text.USART2_IRQHandler,"ax",%progbits
 368              		.align	1
 369              		.global	USART2_IRQHandler
 370              		.syntax unified
 371              		.code	16
 372              		.thumb_func
 373              		.fpu softvfp
 375              	USART2_IRQHandler:
 376              	.LFB49:
 248:Core/Src/stm32f0xx_it.c **** 
 249:Core/Src/stm32f0xx_it.c **** /**
 250:Core/Src/stm32f0xx_it.c ****   * @brief This function handles USART2 global interrupt.
 251:Core/Src/stm32f0xx_it.c ****   */
 252:Core/Src/stm32f0xx_it.c **** void USART2_IRQHandler(void)
 253:Core/Src/stm32f0xx_it.c **** {
 377              		.loc 1 253 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 10B5     		push	{r4, lr}
 382              	.LCFI8:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 4, -8
 385              		.cfi_offset 14, -4
 254:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 255:Core/Src/stm32f0xx_it.c **** 
 256:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 257:Core/Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 386              		.loc 1 257 0
 387 0002 0248     		ldr	r0, .L29
 388 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 389              	.LVL10:
 258:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 259:Core/Src/stm32f0xx_it.c **** 
 260:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 261:Core/Src/stm32f0xx_it.c **** }
 390              		.loc 1 261 0
 391              		@ sp needed
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 12


 392 0008 10BD     		pop	{r4, pc}
 393              	.L30:
 394 000a C046     		.align	2
 395              	.L29:
 396 000c 00000000 		.word	huart2
 397              		.cfi_endproc
 398              	.LFE49:
 400              		.text
 401              	.Letext0:
 402              		.file 2 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 403              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 404              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 405              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 406              		.file 6 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 407              		.file 7 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 408              		.file 8 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 409              		.file 9 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 410              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 411              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 412              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 413              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 414              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 415              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 416              		.file 16 "OSAL/include/timer.h"
ARM GAS  E:\cygwin64\tmp\ccZRorjh.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_it.c
E:\cygwin64\tmp\ccZRorjh.s:16     .text.NMI_Handler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:23     .text.NMI_Handler:00000000 NMI_Handler
E:\cygwin64\tmp\ccZRorjh.s:38     .text.HardFault_Handler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:45     .text.HardFault_Handler:00000000 HardFault_Handler
E:\cygwin64\tmp\ccZRorjh.s:59     .text.SVC_Handler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:66     .text.SVC_Handler:00000000 SVC_Handler
E:\cygwin64\tmp\ccZRorjh.s:80     .text.PendSV_Handler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:87     .text.PendSV_Handler:00000000 PendSV_Handler
E:\cygwin64\tmp\ccZRorjh.s:101    .text.SysTick_Handler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:108    .text.SysTick_Handler:00000000 SysTick_Handler
E:\cygwin64\tmp\ccZRorjh.s:132    .text.DMA1_Channel1_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:139    .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:160    .text.DMA1_Channel1_IRQHandler:0000000c $d
E:\cygwin64\tmp\ccZRorjh.s:165    .text.DMA1_Channel2_3_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:172    .text.DMA1_Channel2_3_IRQHandler:00000000 DMA1_Channel2_3_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:197    .text.DMA1_Channel2_3_IRQHandler:00000010 $d
E:\cygwin64\tmp\ccZRorjh.s:203    .text.DMA1_Channel4_5_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:210    .text.DMA1_Channel4_5_IRQHandler:00000000 DMA1_Channel4_5_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:231    .text.DMA1_Channel4_5_IRQHandler:0000000c $d
E:\cygwin64\tmp\ccZRorjh.s:236    .text.ADC1_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:243    .text.ADC1_IRQHandler:00000000 ADC1_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:264    .text.ADC1_IRQHandler:0000000c $d
E:\cygwin64\tmp\ccZRorjh.s:269    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:276    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:00000000 TIM1_BRK_UP_TRG_COM_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:297    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000c $d
E:\cygwin64\tmp\ccZRorjh.s:302    .text.TIM2_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:309    .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:330    .text.TIM2_IRQHandler:0000000c $d
E:\cygwin64\tmp\ccZRorjh.s:335    .text.USART1_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:342    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:363    .text.USART1_IRQHandler:0000000c $d
E:\cygwin64\tmp\ccZRorjh.s:368    .text.USART2_IRQHandler:00000000 $t
E:\cygwin64\tmp\ccZRorjh.s:375    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
E:\cygwin64\tmp\ccZRorjh.s:396    .text.USART2_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
SysTick_CallBack
HAL_DMA_IRQHandler
hdma_adc
hdma_usart1_tx
hdma_usart1_rx
hdma_usart2_tx
HAL_ADC_IRQHandler
hadc
HAL_TIM_IRQHandler
htim1
htim2
HAL_UART_IRQHandler
huart1
huart2
