ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB37:
  25              		.file 1 "Core/Src/stm32f0xx_it.c"
   1:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f0xx_it.c **** /**
   3:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Core/Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f0xx_it.c ****   * @attention
   8:Core/Src/stm32f0xx_it.c ****   *
   9:Core/Src/stm32f0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Core/Src/stm32f0xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f0xx_it.c ****   *
  12:Core/Src/stm32f0xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32f0xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32f0xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32f0xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32f0xx_it.c ****   *
  17:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f0xx_it.c ****   */
  19:Core/Src/stm32f0xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f0xx_it.c **** 
  21:Core/Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f0xx_it.c **** #include "main.h"
  23:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  24:Core/Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f0xx_it.c **** 
  28:Core/Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f0xx_it.c **** 
  31:Core/Src/stm32f0xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f0xx_it.c **** 
  33:Core/Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 2


  34:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f0xx_it.c ****  
  36:Core/Src/stm32f0xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f0xx_it.c **** 
  38:Core/Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f0xx_it.c **** 
  41:Core/Src/stm32f0xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f0xx_it.c **** 
  43:Core/Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f0xx_it.c **** 
  46:Core/Src/stm32f0xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f0xx_it.c **** 
  48:Core/Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f0xx_it.c **** 
  51:Core/Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f0xx_it.c **** 
  53:Core/Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f0xx_it.c **** 
  56:Core/Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f0xx_it.c **** 
  58:Core/Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim2;
  60:Core/Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart1;
  61:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  62:Core/Src/stm32f0xx_it.c **** 
  63:Core/Src/stm32f0xx_it.c **** /* USER CODE END EV */
  64:Core/Src/stm32f0xx_it.c **** 
  65:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  66:Core/Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */ 
  67:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32f0xx_it.c **** /**
  69:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Core/Src/stm32f0xx_it.c ****   */
  71:Core/Src/stm32f0xx_it.c **** void NMI_Handler(void)
  72:Core/Src/stm32f0xx_it.c **** {
  26              		.loc 1 72 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  73:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Core/Src/stm32f0xx_it.c **** 
  75:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Core/Src/stm32f0xx_it.c **** 
  78:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32f0xx_it.c **** }
  31              		.loc 1 79 0
  32              		@ sp needed
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE37:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 3


  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.code	16
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
  46              	.LFB38:
  80:Core/Src/stm32f0xx_it.c **** 
  81:Core/Src/stm32f0xx_it.c **** /**
  82:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  83:Core/Src/stm32f0xx_it.c ****   */
  84:Core/Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  85:Core/Src/stm32f0xx_it.c **** {
  47              		.loc 1 85 0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  54 0000 FEE7     		b	.L3
  55              		.cfi_endproc
  56              	.LFE38:
  58              		.section	.text.SVC_Handler,"ax",%progbits
  59              		.align	1
  60              		.global	SVC_Handler
  61              		.syntax unified
  62              		.code	16
  63              		.thumb_func
  64              		.fpu softvfp
  66              	SVC_Handler:
  67              	.LFB39:
  86:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  87:Core/Src/stm32f0xx_it.c **** 
  88:Core/Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  89:Core/Src/stm32f0xx_it.c ****   while (1)
  90:Core/Src/stm32f0xx_it.c ****   {
  91:Core/Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  92:Core/Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  93:Core/Src/stm32f0xx_it.c ****   }
  94:Core/Src/stm32f0xx_it.c **** }
  95:Core/Src/stm32f0xx_it.c **** 
  96:Core/Src/stm32f0xx_it.c **** /**
  97:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
  98:Core/Src/stm32f0xx_it.c ****   */
  99:Core/Src/stm32f0xx_it.c **** void SVC_Handler(void)
 100:Core/Src/stm32f0xx_it.c **** {
  68              		.loc 1 100 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
 101:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 102:Core/Src/stm32f0xx_it.c **** 
 103:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 104:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 4


 105:Core/Src/stm32f0xx_it.c **** 
 106:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 107:Core/Src/stm32f0xx_it.c **** }
  73              		.loc 1 107 0
  74              		@ sp needed
  75 0000 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE39:
  79              		.section	.text.PendSV_Handler,"ax",%progbits
  80              		.align	1
  81              		.global	PendSV_Handler
  82              		.syntax unified
  83              		.code	16
  84              		.thumb_func
  85              		.fpu softvfp
  87              	PendSV_Handler:
  88              	.LFB40:
 108:Core/Src/stm32f0xx_it.c **** 
 109:Core/Src/stm32f0xx_it.c **** /**
 110:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 111:Core/Src/stm32f0xx_it.c ****   */
 112:Core/Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 113:Core/Src/stm32f0xx_it.c **** {
  89              		.loc 1 113 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
 114:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 115:Core/Src/stm32f0xx_it.c **** 
 116:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 117:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 118:Core/Src/stm32f0xx_it.c **** 
 119:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 120:Core/Src/stm32f0xx_it.c **** }
  94              		.loc 1 120 0
  95              		@ sp needed
  96 0000 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE40:
 100              		.section	.text.SysTick_Handler,"ax",%progbits
 101              		.align	1
 102              		.global	SysTick_Handler
 103              		.syntax unified
 104              		.code	16
 105              		.thumb_func
 106              		.fpu softvfp
 108              	SysTick_Handler:
 109              	.LFB41:
 121:Core/Src/stm32f0xx_it.c **** 
 122:Core/Src/stm32f0xx_it.c **** /**
 123:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 124:Core/Src/stm32f0xx_it.c ****   */
 125:Core/Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 126:Core/Src/stm32f0xx_it.c **** {
 110              		.loc 1 126 0
 111              		.cfi_startproc
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 5


 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 10B5     		push	{r4, lr}
 115              	.LCFI0:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 127:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 128:Core/Src/stm32f0xx_it.c **** 
 129:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 130:Core/Src/stm32f0xx_it.c ****   HAL_IncTick();
 119              		.loc 1 130 0
 120 0002 FFF7FEFF 		bl	HAL_IncTick
 121              	.LVL0:
 131:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 132:Core/Src/stm32f0xx_it.c **** 
 133:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 134:Core/Src/stm32f0xx_it.c **** }
 122              		.loc 1 134 0
 123              		@ sp needed
 124 0006 10BD     		pop	{r4, pc}
 125              		.cfi_endproc
 126              	.LFE41:
 128              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 129              		.align	1
 130              		.global	TIM2_IRQHandler
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 134              		.fpu softvfp
 136              	TIM2_IRQHandler:
 137              	.LFB42:
 135:Core/Src/stm32f0xx_it.c **** 
 136:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 137:Core/Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 138:Core/Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 139:Core/Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 140:Core/Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 141:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 142:Core/Src/stm32f0xx_it.c **** 
 143:Core/Src/stm32f0xx_it.c **** /**
 144:Core/Src/stm32f0xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 145:Core/Src/stm32f0xx_it.c ****   */
 146:Core/Src/stm32f0xx_it.c **** void TIM2_IRQHandler(void)
 147:Core/Src/stm32f0xx_it.c **** {
 138              		.loc 1 147 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 10B5     		push	{r4, lr}
 143              	.LCFI1:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 4, -8
 146              		.cfi_offset 14, -4
 148:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 149:Core/Src/stm32f0xx_it.c **** 
 150:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 6


 151:Core/Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 147              		.loc 1 151 0
 148 0002 0248     		ldr	r0, .L8
 149 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 150              	.LVL1:
 152:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 153:Core/Src/stm32f0xx_it.c **** 
 154:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 155:Core/Src/stm32f0xx_it.c **** }
 151              		.loc 1 155 0
 152              		@ sp needed
 153 0008 10BD     		pop	{r4, pc}
 154              	.L9:
 155 000a C046     		.align	2
 156              	.L8:
 157 000c 00000000 		.word	htim2
 158              		.cfi_endproc
 159              	.LFE42:
 161              		.section	.text.USART1_IRQHandler,"ax",%progbits
 162              		.align	1
 163              		.global	USART1_IRQHandler
 164              		.syntax unified
 165              		.code	16
 166              		.thumb_func
 167              		.fpu softvfp
 169              	USART1_IRQHandler:
 170              	.LFB43:
 156:Core/Src/stm32f0xx_it.c **** 
 157:Core/Src/stm32f0xx_it.c **** /**
 158:Core/Src/stm32f0xx_it.c ****   * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI li
 159:Core/Src/stm32f0xx_it.c ****   */
 160:Core/Src/stm32f0xx_it.c **** void USART1_IRQHandler(void)
 161:Core/Src/stm32f0xx_it.c **** {
 171              		.loc 1 161 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 162:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 163:Core/Src/stm32f0xx_it.c **** 
 164:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 165:Core/Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 180              		.loc 1 165 0
 181 0002 0248     		ldr	r0, .L11
 182 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 183              	.LVL2:
 166:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 167:Core/Src/stm32f0xx_it.c **** 
 168:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 169:Core/Src/stm32f0xx_it.c **** }
 184              		.loc 1 169 0
 185              		@ sp needed
 186 0008 10BD     		pop	{r4, pc}
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 7


 187              	.L12:
 188 000a C046     		.align	2
 189              	.L11:
 190 000c 00000000 		.word	huart1
 191              		.cfi_endproc
 192              	.LFE43:
 194              		.text
 195              	.Letext0:
 196              		.file 2 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 197              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 198              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 199              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 200              		.file 6 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 201              		.file 7 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 202              		.file 8 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 203              		.file 9 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 204              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 205              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 206              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 207              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 208              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  E:\cygwin64\tmp\cc2gmgpl.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_it.c
E:\cygwin64\tmp\cc2gmgpl.s:16     .text.NMI_Handler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:23     .text.NMI_Handler:00000000 NMI_Handler
E:\cygwin64\tmp\cc2gmgpl.s:38     .text.HardFault_Handler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:45     .text.HardFault_Handler:00000000 HardFault_Handler
E:\cygwin64\tmp\cc2gmgpl.s:59     .text.SVC_Handler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:66     .text.SVC_Handler:00000000 SVC_Handler
E:\cygwin64\tmp\cc2gmgpl.s:80     .text.PendSV_Handler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:87     .text.PendSV_Handler:00000000 PendSV_Handler
E:\cygwin64\tmp\cc2gmgpl.s:101    .text.SysTick_Handler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:108    .text.SysTick_Handler:00000000 SysTick_Handler
E:\cygwin64\tmp\cc2gmgpl.s:129    .text.TIM2_IRQHandler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:136    .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
E:\cygwin64\tmp\cc2gmgpl.s:157    .text.TIM2_IRQHandler:0000000c $d
E:\cygwin64\tmp\cc2gmgpl.s:162    .text.USART1_IRQHandler:00000000 $t
E:\cygwin64\tmp\cc2gmgpl.s:169    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
E:\cygwin64\tmp\cc2gmgpl.s:190    .text.USART1_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim2
HAL_UART_IRQHandler
huart1
