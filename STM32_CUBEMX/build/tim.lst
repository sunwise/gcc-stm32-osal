ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"tim.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_TIM2_Init,"ax",%progbits
  16              		.align	1
  17              		.global	MX_TIM2_Init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_TIM2_Init:
  24              	.LFB38:
  25              		.file 1 "Core/Src/tim.c"
   1:Core/Src/tim.c **** /**
   2:Core/Src/tim.c ****   ******************************************************************************
   3:Core/Src/tim.c ****   * File Name          : TIM.c
   4:Core/Src/tim.c ****   * Description        : This file provides code for the configuration
   5:Core/Src/tim.c ****   *                      of the TIM instances.
   6:Core/Src/tim.c ****   ******************************************************************************
   7:Core/Src/tim.c ****   * @attention
   8:Core/Src/tim.c ****   *
   9:Core/Src/tim.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Core/Src/tim.c ****   * All rights reserved.</center></h2>
  11:Core/Src/tim.c ****   *
  12:Core/Src/tim.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/tim.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/tim.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/tim.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/tim.c ****   *
  17:Core/Src/tim.c ****   ******************************************************************************
  18:Core/Src/tim.c ****   */
  19:Core/Src/tim.c **** 
  20:Core/Src/tim.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/tim.c **** #include "tim.h"
  22:Core/Src/tim.c **** 
  23:Core/Src/tim.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/tim.c **** 
  25:Core/Src/tim.c **** /* USER CODE END 0 */
  26:Core/Src/tim.c **** 
  27:Core/Src/tim.c **** TIM_HandleTypeDef htim1;
  28:Core/Src/tim.c **** TIM_HandleTypeDef htim2;
  29:Core/Src/tim.c **** 
  30:Core/Src/tim.c **** /* TIM1 init function */
  31:Core/Src/tim.c **** void MX_TIM1_Init(void)
  32:Core/Src/tim.c **** {
  33:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 2


  34:Core/Src/tim.c ****   TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  35:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
  36:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
  37:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
  38:Core/Src/tim.c **** 
  39:Core/Src/tim.c ****   htim1.Instance = TIM1;
  40:Core/Src/tim.c ****   htim1.Init.Prescaler = 0;
  41:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  42:Core/Src/tim.c ****   htim1.Init.Period = 0;
  43:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  44:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
  45:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  46:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  47:Core/Src/tim.c ****   {
  48:Core/Src/tim.c ****     Error_Handler();
  49:Core/Src/tim.c ****   }
  50:Core/Src/tim.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  51:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  52:Core/Src/tim.c ****   {
  53:Core/Src/tim.c ****     Error_Handler();
  54:Core/Src/tim.c ****   }
  55:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  56:Core/Src/tim.c ****   {
  57:Core/Src/tim.c ****     Error_Handler();
  58:Core/Src/tim.c ****   }
  59:Core/Src/tim.c ****   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  60:Core/Src/tim.c ****   sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  61:Core/Src/tim.c ****   if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
  62:Core/Src/tim.c ****   {
  63:Core/Src/tim.c ****     Error_Handler();
  64:Core/Src/tim.c ****   }
  65:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  66:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  67:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  68:Core/Src/tim.c ****   {
  69:Core/Src/tim.c ****     Error_Handler();
  70:Core/Src/tim.c ****   }
  71:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
  72:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
  73:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  74:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  75:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  76:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  77:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  78:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  79:Core/Src/tim.c ****   {
  80:Core/Src/tim.c ****     Error_Handler();
  81:Core/Src/tim.c ****   }
  82:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  83:Core/Src/tim.c ****   {
  84:Core/Src/tim.c ****     Error_Handler();
  85:Core/Src/tim.c ****   }
  86:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  87:Core/Src/tim.c ****   {
  88:Core/Src/tim.c ****     Error_Handler();
  89:Core/Src/tim.c ****   }
  90:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 3


  91:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  92:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  93:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
  94:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  95:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  96:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  97:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  98:Core/Src/tim.c ****   {
  99:Core/Src/tim.c ****     Error_Handler();
 100:Core/Src/tim.c ****   }
 101:Core/Src/tim.c ****   HAL_TIM_MspPostInit(&htim1);
 102:Core/Src/tim.c **** 
 103:Core/Src/tim.c **** }
 104:Core/Src/tim.c **** /* TIM2 init function */
 105:Core/Src/tim.c **** void MX_TIM2_Init(void)
 106:Core/Src/tim.c **** {
  26              		.loc 1 106 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 48
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 00B5     		push	{lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 14, -4
  34 0002 8DB0     		sub	sp, sp, #52
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 56
 107:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  37              		.loc 1 107 0
  38 0004 1022     		movs	r2, #16
  39 0006 0021     		movs	r1, #0
  40 0008 08A8     		add	r0, sp, #32
  41 000a FFF7FEFF 		bl	memset
  42              	.LVL0:
 108:Core/Src/tim.c ****   TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  43              		.loc 1 108 0
  44 000e 1422     		movs	r2, #20
  45 0010 0021     		movs	r1, #0
  46 0012 03A8     		add	r0, sp, #12
  47 0014 FFF7FEFF 		bl	memset
  48              	.LVL1:
 109:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
  49              		.loc 1 109 0
  50 0018 0822     		movs	r2, #8
  51 001a 0021     		movs	r1, #0
  52 001c 01A8     		add	r0, sp, #4
  53 001e FFF7FEFF 		bl	memset
  54              	.LVL2:
 110:Core/Src/tim.c **** 
 111:Core/Src/tim.c ****   htim2.Instance = TIM2;
  55              		.loc 1 111 0
  56 0022 1C48     		ldr	r0, .L10
  57 0024 8023     		movs	r3, #128
  58 0026 DB05     		lsls	r3, r3, #23
  59 0028 0360     		str	r3, [r0]
 112:Core/Src/tim.c ****   htim2.Init.Prescaler = 0;
  60              		.loc 1 112 0
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 4


  61 002a 0023     		movs	r3, #0
  62 002c 4360     		str	r3, [r0, #4]
 113:Core/Src/tim.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  63              		.loc 1 113 0
  64 002e 8360     		str	r3, [r0, #8]
 114:Core/Src/tim.c ****   htim2.Init.Period = 0;
  65              		.loc 1 114 0
  66 0030 C360     		str	r3, [r0, #12]
 115:Core/Src/tim.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  67              		.loc 1 115 0
  68 0032 0361     		str	r3, [r0, #16]
 116:Core/Src/tim.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  69              		.loc 1 116 0
  70 0034 8033     		adds	r3, r3, #128
  71 0036 8361     		str	r3, [r0, #24]
 117:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  72              		.loc 1 117 0
  73 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
  74              	.LVL3:
  75 003c 0028     		cmp	r0, #0
  76 003e 1DD1     		bne	.L6
  77              	.L2:
 118:Core/Src/tim.c ****   {
 119:Core/Src/tim.c ****     Error_Handler();
 120:Core/Src/tim.c ****   }
 121:Core/Src/tim.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  78              		.loc 1 121 0
  79 0040 8023     		movs	r3, #128
  80 0042 5B01     		lsls	r3, r3, #5
  81 0044 0893     		str	r3, [sp, #32]
 122:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  82              		.loc 1 122 0
  83 0046 08A9     		add	r1, sp, #32
  84 0048 1248     		ldr	r0, .L10
  85 004a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
  86              	.LVL4:
  87 004e 0028     		cmp	r0, #0
  88 0050 17D1     		bne	.L7
  89              	.L3:
 123:Core/Src/tim.c ****   {
 124:Core/Src/tim.c ****     Error_Handler();
 125:Core/Src/tim.c ****   }
 126:Core/Src/tim.c ****   sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  90              		.loc 1 126 0
  91 0052 0423     		movs	r3, #4
  92 0054 0393     		str	r3, [sp, #12]
 127:Core/Src/tim.c ****   sSlaveConfig.InputTrigger = TIM_TS_ITR1;
  93              		.loc 1 127 0
  94 0056 0C33     		adds	r3, r3, #12
  95 0058 0493     		str	r3, [sp, #16]
 128:Core/Src/tim.c ****   if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
  96              		.loc 1 128 0
  97 005a 03A9     		add	r1, sp, #12
  98 005c 0D48     		ldr	r0, .L10
  99 005e FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchronization
 100              	.LVL5:
 101 0062 0028     		cmp	r0, #0
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 5


 102 0064 10D1     		bne	.L8
 103              	.L4:
 129:Core/Src/tim.c ****   {
 130:Core/Src/tim.c ****     Error_Handler();
 131:Core/Src/tim.c ****   }
 132:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 104              		.loc 1 132 0
 105 0066 0023     		movs	r3, #0
 106 0068 0193     		str	r3, [sp, #4]
 133:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 107              		.loc 1 133 0
 108 006a 0293     		str	r3, [sp, #8]
 134:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 109              		.loc 1 134 0
 110 006c 01A9     		add	r1, sp, #4
 111 006e 0948     		ldr	r0, .L10
 112 0070 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 113              	.LVL6:
 114 0074 0028     		cmp	r0, #0
 115 0076 0AD1     		bne	.L9
 116              	.L1:
 135:Core/Src/tim.c ****   {
 136:Core/Src/tim.c ****     Error_Handler();
 137:Core/Src/tim.c ****   }
 138:Core/Src/tim.c **** 
 139:Core/Src/tim.c **** }
 117              		.loc 1 139 0
 118 0078 0DB0     		add	sp, sp, #52
 119              		@ sp needed
 120 007a 00BD     		pop	{pc}
 121              	.L6:
 119:Core/Src/tim.c ****   }
 122              		.loc 1 119 0
 123 007c FFF7FEFF 		bl	Error_Handler
 124              	.LVL7:
 125 0080 DEE7     		b	.L2
 126              	.L7:
 124:Core/Src/tim.c ****   }
 127              		.loc 1 124 0
 128 0082 FFF7FEFF 		bl	Error_Handler
 129              	.LVL8:
 130 0086 E4E7     		b	.L3
 131              	.L8:
 130:Core/Src/tim.c ****   }
 132              		.loc 1 130 0
 133 0088 FFF7FEFF 		bl	Error_Handler
 134              	.LVL9:
 135 008c EBE7     		b	.L4
 136              	.L9:
 136:Core/Src/tim.c ****   }
 137              		.loc 1 136 0
 138 008e FFF7FEFF 		bl	Error_Handler
 139              	.LVL10:
 140              		.loc 1 139 0
 141 0092 F1E7     		b	.L1
 142              	.L11:
 143              		.align	2
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 6


 144              	.L10:
 145 0094 00000000 		.word	htim2
 146              		.cfi_endproc
 147              	.LFE38:
 149              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
 150              		.align	1
 151              		.global	HAL_TIM_Base_MspInit
 152              		.syntax unified
 153              		.code	16
 154              		.thumb_func
 155              		.fpu softvfp
 157              	HAL_TIM_Base_MspInit:
 158              	.LFB39:
 140:Core/Src/tim.c **** 
 141:Core/Src/tim.c **** void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
 142:Core/Src/tim.c **** {
 159              		.loc 1 142 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              	.LVL11:
 164 0000 00B5     		push	{lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 14, -4
 168 0002 83B0     		sub	sp, sp, #12
 169              	.LCFI3:
 170              		.cfi_def_cfa_offset 16
 143:Core/Src/tim.c **** 
 144:Core/Src/tim.c ****   if(tim_baseHandle->Instance==TIM1)
 171              		.loc 1 144 0
 172 0004 0368     		ldr	r3, [r0]
 173 0006 134A     		ldr	r2, .L17
 174 0008 9342     		cmp	r3, r2
 175 000a 05D0     		beq	.L15
 145:Core/Src/tim.c ****   {
 146:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 0 */
 147:Core/Src/tim.c **** 
 148:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 0 */
 149:Core/Src/tim.c ****     /* TIM1 clock enable */
 150:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_ENABLE();
 151:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 152:Core/Src/tim.c **** 
 153:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 1 */
 154:Core/Src/tim.c ****   }
 155:Core/Src/tim.c ****   else if(tim_baseHandle->Instance==TIM2)
 176              		.loc 1 155 0
 177 000c 8022     		movs	r2, #128
 178 000e D205     		lsls	r2, r2, #23
 179 0010 9342     		cmp	r3, r2
 180 0012 0CD0     		beq	.L16
 181              	.LVL12:
 182              	.L12:
 156:Core/Src/tim.c ****   {
 157:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_MspInit 0 */
 158:Core/Src/tim.c **** 
 159:Core/Src/tim.c ****   /* USER CODE END TIM2_MspInit 0 */
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 7


 160:Core/Src/tim.c ****     /* TIM2 clock enable */
 161:Core/Src/tim.c ****     __HAL_RCC_TIM2_CLK_ENABLE();
 162:Core/Src/tim.c **** 
 163:Core/Src/tim.c ****     /* TIM2 interrupt Init */
 164:Core/Src/tim.c ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 165:Core/Src/tim.c ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 166:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_MspInit 1 */
 167:Core/Src/tim.c **** 
 168:Core/Src/tim.c ****   /* USER CODE END TIM2_MspInit 1 */
 169:Core/Src/tim.c ****   }
 170:Core/Src/tim.c **** }
 183              		.loc 1 170 0
 184 0014 03B0     		add	sp, sp, #12
 185              		@ sp needed
 186 0016 00BD     		pop	{pc}
 187              	.LVL13:
 188              	.L15:
 189              	.LBB2:
 150:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 190              		.loc 1 150 0
 191 0018 0F4A     		ldr	r2, .L17+4
 192 001a 9169     		ldr	r1, [r2, #24]
 193 001c 8020     		movs	r0, #128
 194              	.LVL14:
 195 001e 0001     		lsls	r0, r0, #4
 196 0020 0143     		orrs	r1, r0
 197 0022 9161     		str	r1, [r2, #24]
 198 0024 9369     		ldr	r3, [r2, #24]
 199 0026 0340     		ands	r3, r0
 200 0028 0093     		str	r3, [sp]
 201 002a 009B     		ldr	r3, [sp]
 202              	.LBE2:
 203 002c F2E7     		b	.L12
 204              	.LVL15:
 205              	.L16:
 206              	.LBB3:
 161:Core/Src/tim.c **** 
 207              		.loc 1 161 0
 208 002e 0A4A     		ldr	r2, .L17+4
 209 0030 D169     		ldr	r1, [r2, #28]
 210 0032 0123     		movs	r3, #1
 211 0034 1943     		orrs	r1, r3
 212 0036 D161     		str	r1, [r2, #28]
 213 0038 D269     		ldr	r2, [r2, #28]
 214 003a 1340     		ands	r3, r2
 215 003c 0193     		str	r3, [sp, #4]
 216 003e 019B     		ldr	r3, [sp, #4]
 217              	.LBE3:
 164:Core/Src/tim.c ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 218              		.loc 1 164 0
 219 0040 0022     		movs	r2, #0
 220 0042 0021     		movs	r1, #0
 221 0044 0F20     		movs	r0, #15
 222              	.LVL16:
 223 0046 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 224              	.LVL17:
 165:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_MspInit 1 */
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 8


 225              		.loc 1 165 0
 226 004a 0F20     		movs	r0, #15
 227 004c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 228              	.LVL18:
 229              		.loc 1 170 0
 230 0050 E0E7     		b	.L12
 231              	.L18:
 232 0052 C046     		.align	2
 233              	.L17:
 234 0054 002C0140 		.word	1073818624
 235 0058 00100240 		.word	1073876992
 236              		.cfi_endproc
 237              	.LFE39:
 239              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
 240              		.align	1
 241              		.global	HAL_TIM_MspPostInit
 242              		.syntax unified
 243              		.code	16
 244              		.thumb_func
 245              		.fpu softvfp
 247              	HAL_TIM_MspPostInit:
 248              	.LFB40:
 171:Core/Src/tim.c **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 172:Core/Src/tim.c **** {
 249              		.loc 1 172 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 24
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL19:
 254 0000 10B5     		push	{r4, lr}
 255              	.LCFI4:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 4, -8
 258              		.cfi_offset 14, -4
 259 0002 86B0     		sub	sp, sp, #24
 260              	.LCFI5:
 261              		.cfi_def_cfa_offset 32
 262 0004 0400     		movs	r4, r0
 173:Core/Src/tim.c **** 
 174:Core/Src/tim.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 263              		.loc 1 174 0
 264 0006 1422     		movs	r2, #20
 265 0008 0021     		movs	r1, #0
 266 000a 01A8     		add	r0, sp, #4
 267              	.LVL20:
 268 000c FFF7FEFF 		bl	memset
 269              	.LVL21:
 175:Core/Src/tim.c ****   if(timHandle->Instance==TIM1)
 270              		.loc 1 175 0
 271 0010 2268     		ldr	r2, [r4]
 272 0012 0D4B     		ldr	r3, .L22
 273 0014 9A42     		cmp	r2, r3
 274 0016 01D0     		beq	.L21
 275              	.L19:
 176:Core/Src/tim.c ****   {
 177:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 0 */
 178:Core/Src/tim.c **** 
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 9


 179:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 0 */
 180:Core/Src/tim.c ****   
 181:Core/Src/tim.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 182:Core/Src/tim.c ****     /**TIM1 GPIO Configuration    
 183:Core/Src/tim.c ****     PA8     ------> TIM1_CH1
 184:Core/Src/tim.c ****     PA9     ------> TIM1_CH2
 185:Core/Src/tim.c ****     PA10     ------> TIM1_CH3 
 186:Core/Src/tim.c ****     */
 187:Core/Src/tim.c ****     GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 188:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 189:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 190:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 191:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 192:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 193:Core/Src/tim.c **** 
 194:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 1 */
 195:Core/Src/tim.c **** 
 196:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 1 */
 197:Core/Src/tim.c ****   }
 198:Core/Src/tim.c **** 
 199:Core/Src/tim.c **** }
 276              		.loc 1 199 0
 277 0018 06B0     		add	sp, sp, #24
 278              		@ sp needed
 279              	.LVL22:
 280 001a 10BD     		pop	{r4, pc}
 281              	.LVL23:
 282              	.L21:
 283              	.LBB4:
 181:Core/Src/tim.c ****     /**TIM1 GPIO Configuration    
 284              		.loc 1 181 0
 285 001c 0B4A     		ldr	r2, .L22+4
 286 001e 5169     		ldr	r1, [r2, #20]
 287 0020 8020     		movs	r0, #128
 288 0022 8002     		lsls	r0, r0, #10
 289 0024 0143     		orrs	r1, r0
 290 0026 5161     		str	r1, [r2, #20]
 291 0028 5369     		ldr	r3, [r2, #20]
 292 002a 0340     		ands	r3, r0
 293 002c 0093     		str	r3, [sp]
 294 002e 009B     		ldr	r3, [sp]
 295              	.LBE4:
 187:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 296              		.loc 1 187 0
 297 0030 E023     		movs	r3, #224
 298 0032 DB00     		lsls	r3, r3, #3
 299 0034 0193     		str	r3, [sp, #4]
 188:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 300              		.loc 1 188 0
 301 0036 0223     		movs	r3, #2
 302 0038 0293     		str	r3, [sp, #8]
 191:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 303              		.loc 1 191 0
 304 003a 0593     		str	r3, [sp, #20]
 192:Core/Src/tim.c **** 
 305              		.loc 1 192 0
 306 003c 9020     		movs	r0, #144
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 10


 307 003e 01A9     		add	r1, sp, #4
 308 0040 C005     		lsls	r0, r0, #23
 309 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 310              	.LVL24:
 311              		.loc 1 199 0
 312 0046 E7E7     		b	.L19
 313              	.L23:
 314              		.align	2
 315              	.L22:
 316 0048 002C0140 		.word	1073818624
 317 004c 00100240 		.word	1073876992
 318              		.cfi_endproc
 319              	.LFE40:
 321              		.section	.text.MX_TIM1_Init,"ax",%progbits
 322              		.align	1
 323              		.global	MX_TIM1_Init
 324              		.syntax unified
 325              		.code	16
 326              		.thumb_func
 327              		.fpu softvfp
 329              	MX_TIM1_Init:
 330              	.LFB37:
  32:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 331              		.loc 1 32 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 104
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 00B5     		push	{lr}
 336              	.LCFI6:
 337              		.cfi_def_cfa_offset 4
 338              		.cfi_offset 14, -4
 339 0002 9BB0     		sub	sp, sp, #108
 340              	.LCFI7:
 341              		.cfi_def_cfa_offset 112
  33:Core/Src/tim.c ****   TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 342              		.loc 1 33 0
 343 0004 1022     		movs	r2, #16
 344 0006 0021     		movs	r1, #0
 345 0008 16A8     		add	r0, sp, #88
 346 000a FFF7FEFF 		bl	memset
 347              	.LVL25:
  34:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 348              		.loc 1 34 0
 349 000e 1422     		movs	r2, #20
 350 0010 0021     		movs	r1, #0
 351 0012 11A8     		add	r0, sp, #68
 352 0014 FFF7FEFF 		bl	memset
 353              	.LVL26:
  35:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 354              		.loc 1 35 0
 355 0018 0822     		movs	r2, #8
 356 001a 0021     		movs	r1, #0
 357 001c 0FA8     		add	r0, sp, #60
 358 001e FFF7FEFF 		bl	memset
 359              	.LVL27:
  36:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 360              		.loc 1 36 0
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 11


 361 0022 1C22     		movs	r2, #28
 362 0024 0021     		movs	r1, #0
 363 0026 08A8     		add	r0, sp, #32
 364 0028 FFF7FEFF 		bl	memset
 365              	.LVL28:
  37:Core/Src/tim.c **** 
 366              		.loc 1 37 0
 367 002c 1C22     		movs	r2, #28
 368 002e 0021     		movs	r1, #0
 369 0030 01A8     		add	r0, sp, #4
 370 0032 FFF7FEFF 		bl	memset
 371              	.LVL29:
  39:Core/Src/tim.c ****   htim1.Init.Prescaler = 0;
 372              		.loc 1 39 0
 373 0036 3F48     		ldr	r0, .L43
 374 0038 3F4B     		ldr	r3, .L43+4
 375 003a 0360     		str	r3, [r0]
  40:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 376              		.loc 1 40 0
 377 003c 0023     		movs	r3, #0
 378 003e 4360     		str	r3, [r0, #4]
  41:Core/Src/tim.c ****   htim1.Init.Period = 0;
 379              		.loc 1 41 0
 380 0040 8360     		str	r3, [r0, #8]
  42:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 381              		.loc 1 42 0
 382 0042 C360     		str	r3, [r0, #12]
  43:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
 383              		.loc 1 43 0
 384 0044 0361     		str	r3, [r0, #16]
  44:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 385              		.loc 1 44 0
 386 0046 4361     		str	r3, [r0, #20]
  45:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 387              		.loc 1 45 0
 388 0048 8033     		adds	r3, r3, #128
 389 004a 8361     		str	r3, [r0, #24]
  46:Core/Src/tim.c ****   {
 390              		.loc 1 46 0
 391 004c FFF7FEFF 		bl	HAL_TIM_Base_Init
 392              	.LVL30:
 393 0050 0028     		cmp	r0, #0
 394 0052 53D1     		bne	.L34
 395              	.L25:
  50:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 396              		.loc 1 50 0
 397 0054 8023     		movs	r3, #128
 398 0056 5B01     		lsls	r3, r3, #5
 399 0058 1693     		str	r3, [sp, #88]
  51:Core/Src/tim.c ****   {
 400              		.loc 1 51 0
 401 005a 16A9     		add	r1, sp, #88
 402 005c 3548     		ldr	r0, .L43
 403 005e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 404              	.LVL31:
 405 0062 0028     		cmp	r0, #0
 406 0064 4DD1     		bne	.L35
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 12


 407              	.L26:
  55:Core/Src/tim.c ****   {
 408              		.loc 1 55 0
 409 0066 3348     		ldr	r0, .L43
 410 0068 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 411              	.LVL32:
 412 006c 0028     		cmp	r0, #0
 413 006e 4BD1     		bne	.L36
 414              	.L27:
  59:Core/Src/tim.c ****   sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 415              		.loc 1 59 0
 416 0070 0423     		movs	r3, #4
 417 0072 1193     		str	r3, [sp, #68]
  60:Core/Src/tim.c ****   if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 418              		.loc 1 60 0
 419 0074 0023     		movs	r3, #0
 420 0076 1293     		str	r3, [sp, #72]
  61:Core/Src/tim.c ****   {
 421              		.loc 1 61 0
 422 0078 11A9     		add	r1, sp, #68
 423 007a 2E48     		ldr	r0, .L43
 424 007c FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchronization
 425              	.LVL33:
 426 0080 0028     		cmp	r0, #0
 427 0082 44D1     		bne	.L37
 428              	.L28:
  65:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 429              		.loc 1 65 0
 430 0084 0023     		movs	r3, #0
 431 0086 0F93     		str	r3, [sp, #60]
  66:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 432              		.loc 1 66 0
 433 0088 1093     		str	r3, [sp, #64]
  67:Core/Src/tim.c ****   {
 434              		.loc 1 67 0
 435 008a 0FA9     		add	r1, sp, #60
 436 008c 2948     		ldr	r0, .L43
 437 008e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 438              	.LVL34:
 439 0092 0028     		cmp	r0, #0
 440 0094 3ED1     		bne	.L38
 441              	.L29:
  71:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 442              		.loc 1 71 0
 443 0096 6023     		movs	r3, #96
 444 0098 0893     		str	r3, [sp, #32]
  72:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 445              		.loc 1 72 0
 446 009a 0023     		movs	r3, #0
 447 009c 0993     		str	r3, [sp, #36]
  73:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 448              		.loc 1 73 0
 449 009e 0A93     		str	r3, [sp, #40]
  74:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 450              		.loc 1 74 0
 451 00a0 0B93     		str	r3, [sp, #44]
  75:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 13


 452              		.loc 1 75 0
 453 00a2 0C93     		str	r3, [sp, #48]
  76:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 454              		.loc 1 76 0
 455 00a4 0D93     		str	r3, [sp, #52]
  77:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 456              		.loc 1 77 0
 457 00a6 0E93     		str	r3, [sp, #56]
  78:Core/Src/tim.c ****   {
 458              		.loc 1 78 0
 459 00a8 0022     		movs	r2, #0
 460 00aa 08A9     		add	r1, sp, #32
 461 00ac 2148     		ldr	r0, .L43
 462 00ae FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 463              	.LVL35:
 464 00b2 0028     		cmp	r0, #0
 465 00b4 31D1     		bne	.L39
 466              	.L30:
  82:Core/Src/tim.c ****   {
 467              		.loc 1 82 0
 468 00b6 0422     		movs	r2, #4
 469 00b8 08A9     		add	r1, sp, #32
 470 00ba 1E48     		ldr	r0, .L43
 471 00bc FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 472              	.LVL36:
 473 00c0 0028     		cmp	r0, #0
 474 00c2 2DD1     		bne	.L40
 475              	.L31:
  86:Core/Src/tim.c ****   {
 476              		.loc 1 86 0
 477 00c4 0822     		movs	r2, #8
 478 00c6 08A9     		add	r1, sp, #32
 479 00c8 1A48     		ldr	r0, .L43
 480 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 481              	.LVL37:
 482 00ce 0028     		cmp	r0, #0
 483 00d0 29D1     		bne	.L41
 484              	.L32:
  90:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 485              		.loc 1 90 0
 486 00d2 0023     		movs	r3, #0
 487 00d4 0193     		str	r3, [sp, #4]
  91:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 488              		.loc 1 91 0
 489 00d6 0293     		str	r3, [sp, #8]
  92:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 490              		.loc 1 92 0
 491 00d8 0393     		str	r3, [sp, #12]
  93:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 492              		.loc 1 93 0
 493 00da 0493     		str	r3, [sp, #16]
  94:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 494              		.loc 1 94 0
 495 00dc 0593     		str	r3, [sp, #20]
  95:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 496              		.loc 1 95 0
 497 00de 8022     		movs	r2, #128
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 14


 498 00e0 9201     		lsls	r2, r2, #6
 499 00e2 0692     		str	r2, [sp, #24]
  96:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 500              		.loc 1 96 0
 501 00e4 0793     		str	r3, [sp, #28]
  97:Core/Src/tim.c ****   {
 502              		.loc 1 97 0
 503 00e6 01A9     		add	r1, sp, #4
 504 00e8 1248     		ldr	r0, .L43
 505 00ea FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 506              	.LVL38:
 507 00ee 0028     		cmp	r0, #0
 508 00f0 1CD1     		bne	.L42
 509              	.L33:
 101:Core/Src/tim.c **** 
 510              		.loc 1 101 0
 511 00f2 1048     		ldr	r0, .L43
 512 00f4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 513              	.LVL39:
 103:Core/Src/tim.c **** /* TIM2 init function */
 514              		.loc 1 103 0
 515 00f8 1BB0     		add	sp, sp, #108
 516              		@ sp needed
 517 00fa 00BD     		pop	{pc}
 518              	.L34:
  48:Core/Src/tim.c ****   }
 519              		.loc 1 48 0
 520 00fc FFF7FEFF 		bl	Error_Handler
 521              	.LVL40:
 522 0100 A8E7     		b	.L25
 523              	.L35:
  53:Core/Src/tim.c ****   }
 524              		.loc 1 53 0
 525 0102 FFF7FEFF 		bl	Error_Handler
 526              	.LVL41:
 527 0106 AEE7     		b	.L26
 528              	.L36:
  57:Core/Src/tim.c ****   }
 529              		.loc 1 57 0
 530 0108 FFF7FEFF 		bl	Error_Handler
 531              	.LVL42:
 532 010c B0E7     		b	.L27
 533              	.L37:
  63:Core/Src/tim.c ****   }
 534              		.loc 1 63 0
 535 010e FFF7FEFF 		bl	Error_Handler
 536              	.LVL43:
 537 0112 B7E7     		b	.L28
 538              	.L38:
  69:Core/Src/tim.c ****   }
 539              		.loc 1 69 0
 540 0114 FFF7FEFF 		bl	Error_Handler
 541              	.LVL44:
 542 0118 BDE7     		b	.L29
 543              	.L39:
  80:Core/Src/tim.c ****   }
 544              		.loc 1 80 0
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 15


 545 011a FFF7FEFF 		bl	Error_Handler
 546              	.LVL45:
 547 011e CAE7     		b	.L30
 548              	.L40:
  84:Core/Src/tim.c ****   }
 549              		.loc 1 84 0
 550 0120 FFF7FEFF 		bl	Error_Handler
 551              	.LVL46:
 552 0124 CEE7     		b	.L31
 553              	.L41:
  88:Core/Src/tim.c ****   }
 554              		.loc 1 88 0
 555 0126 FFF7FEFF 		bl	Error_Handler
 556              	.LVL47:
 557 012a D2E7     		b	.L32
 558              	.L42:
  99:Core/Src/tim.c ****   }
 559              		.loc 1 99 0
 560 012c FFF7FEFF 		bl	Error_Handler
 561              	.LVL48:
 562 0130 DFE7     		b	.L33
 563              	.L44:
 564 0132 C046     		.align	2
 565              	.L43:
 566 0134 00000000 		.word	htim1
 567 0138 002C0140 		.word	1073818624
 568              		.cfi_endproc
 569              	.LFE37:
 571              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 572              		.align	1
 573              		.global	HAL_TIM_Base_MspDeInit
 574              		.syntax unified
 575              		.code	16
 576              		.thumb_func
 577              		.fpu softvfp
 579              	HAL_TIM_Base_MspDeInit:
 580              	.LFB41:
 200:Core/Src/tim.c **** 
 201:Core/Src/tim.c **** void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
 202:Core/Src/tim.c **** {
 581              		.loc 1 202 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL49:
 586 0000 10B5     		push	{r4, lr}
 587              	.LCFI8:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 4, -8
 590              		.cfi_offset 14, -4
 203:Core/Src/tim.c **** 
 204:Core/Src/tim.c ****   if(tim_baseHandle->Instance==TIM1)
 591              		.loc 1 204 0
 592 0002 0368     		ldr	r3, [r0]
 593 0004 0B4A     		ldr	r2, .L50
 594 0006 9342     		cmp	r3, r2
 595 0008 04D0     		beq	.L48
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 16


 205:Core/Src/tim.c ****   {
 206:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 0 */
 207:Core/Src/tim.c **** 
 208:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 0 */
 209:Core/Src/tim.c ****     /* Peripheral clock disable */
 210:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_DISABLE();
 211:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 212:Core/Src/tim.c **** 
 213:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 1 */
 214:Core/Src/tim.c ****   }
 215:Core/Src/tim.c ****   else if(tim_baseHandle->Instance==TIM2)
 596              		.loc 1 215 0
 597 000a 8022     		movs	r2, #128
 598 000c D205     		lsls	r2, r2, #23
 599 000e 9342     		cmp	r3, r2
 600 0010 06D0     		beq	.L49
 601              	.LVL50:
 602              	.L45:
 216:Core/Src/tim.c ****   {
 217:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_MspDeInit 0 */
 218:Core/Src/tim.c **** 
 219:Core/Src/tim.c ****   /* USER CODE END TIM2_MspDeInit 0 */
 220:Core/Src/tim.c ****     /* Peripheral clock disable */
 221:Core/Src/tim.c ****     __HAL_RCC_TIM2_CLK_DISABLE();
 222:Core/Src/tim.c **** 
 223:Core/Src/tim.c ****     /* TIM2 interrupt Deinit */
 224:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM2_IRQn);
 225:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 226:Core/Src/tim.c **** 
 227:Core/Src/tim.c ****   /* USER CODE END TIM2_MspDeInit 1 */
 228:Core/Src/tim.c ****   }
 229:Core/Src/tim.c **** } 
 603              		.loc 1 229 0
 604              		@ sp needed
 605 0012 10BD     		pop	{r4, pc}
 606              	.LVL51:
 607              	.L48:
 210:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 608              		.loc 1 210 0
 609 0014 084A     		ldr	r2, .L50+4
 610 0016 9369     		ldr	r3, [r2, #24]
 611 0018 0849     		ldr	r1, .L50+8
 612 001a 0B40     		ands	r3, r1
 613 001c 9361     		str	r3, [r2, #24]
 614 001e F8E7     		b	.L45
 615              	.L49:
 221:Core/Src/tim.c **** 
 616              		.loc 1 221 0
 617 0020 054A     		ldr	r2, .L50+4
 618 0022 D369     		ldr	r3, [r2, #28]
 619 0024 0121     		movs	r1, #1
 620 0026 8B43     		bics	r3, r1
 621 0028 D361     		str	r3, [r2, #28]
 224:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 622              		.loc 1 224 0
 623 002a 0F20     		movs	r0, #15
 624              	.LVL52:
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 17


 625 002c FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 626              	.LVL53:
 627              		.loc 1 229 0
 628 0030 EFE7     		b	.L45
 629              	.L51:
 630 0032 C046     		.align	2
 631              	.L50:
 632 0034 002C0140 		.word	1073818624
 633 0038 00100240 		.word	1073876992
 634 003c FFF7FFFF 		.word	-2049
 635              		.cfi_endproc
 636              	.LFE41:
 638              		.comm	htim2,64,4
 639              		.comm	htim1,64,4
 640              		.text
 641              	.Letext0:
 642              		.file 2 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 643              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 644              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 645              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 646              		.file 6 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 647              		.file 7 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 648              		.file 8 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 649              		.file 9 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 650              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 651              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 652              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 653              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 654              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 655              		.file 15 "Core/Inc/tim.h"
 656              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 657              		.file 17 "Core/Inc/main.h"
 658              		.file 18 "<built-in>"
ARM GAS  E:\cygwin64\tmp\cc0nuwCb.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 tim.c
E:\cygwin64\tmp\cc0nuwCb.s:16     .text.MX_TIM2_Init:00000000 $t
E:\cygwin64\tmp\cc0nuwCb.s:23     .text.MX_TIM2_Init:00000000 MX_TIM2_Init
E:\cygwin64\tmp\cc0nuwCb.s:145    .text.MX_TIM2_Init:00000094 $d
                            *COM*:00000040 htim2
E:\cygwin64\tmp\cc0nuwCb.s:150    .text.HAL_TIM_Base_MspInit:00000000 $t
E:\cygwin64\tmp\cc0nuwCb.s:157    .text.HAL_TIM_Base_MspInit:00000000 HAL_TIM_Base_MspInit
E:\cygwin64\tmp\cc0nuwCb.s:234    .text.HAL_TIM_Base_MspInit:00000054 $d
E:\cygwin64\tmp\cc0nuwCb.s:240    .text.HAL_TIM_MspPostInit:00000000 $t
E:\cygwin64\tmp\cc0nuwCb.s:247    .text.HAL_TIM_MspPostInit:00000000 HAL_TIM_MspPostInit
E:\cygwin64\tmp\cc0nuwCb.s:316    .text.HAL_TIM_MspPostInit:00000048 $d
E:\cygwin64\tmp\cc0nuwCb.s:322    .text.MX_TIM1_Init:00000000 $t
E:\cygwin64\tmp\cc0nuwCb.s:329    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
E:\cygwin64\tmp\cc0nuwCb.s:566    .text.MX_TIM1_Init:00000134 $d
                            *COM*:00000040 htim1
E:\cygwin64\tmp\cc0nuwCb.s:572    .text.HAL_TIM_Base_MspDeInit:00000000 $t
E:\cygwin64\tmp\cc0nuwCb.s:579    .text.HAL_TIM_Base_MspDeInit:00000000 HAL_TIM_Base_MspDeInit
E:\cygwin64\tmp\cc0nuwCb.s:632    .text.HAL_TIM_Base_MspDeInit:00000034 $d

UNDEFINED SYMBOLS
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchronization
HAL_TIMEx_MasterConfigSynchronization
Error_Handler
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_Init
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_NVIC_DisableIRQ
