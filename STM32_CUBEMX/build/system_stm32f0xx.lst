ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f0xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemInit,"ax",%progbits
  16              		.align	1
  17              		.global	SystemInit
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SystemInit:
  24              	.LFB37:
  25              		.file 1 "Core/Src/system_stm32f0xx.c"
   1:Core/Src/system_stm32f0xx.c **** /**
   2:Core/Src/system_stm32f0xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:Core/Src/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   6:Core/Src/system_stm32f0xx.c ****   *
   7:Core/Src/system_stm32f0xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Core/Src/system_stm32f0xx.c ****   *    user application:
   9:Core/Src/system_stm32f0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Core/Src/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  11:Core/Src/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  12:Core/Src/system_stm32f0xx.c ****   *
  13:Core/Src/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Core/Src/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick
  15:Core/Src/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  16:Core/Src/system_stm32f0xx.c ****   *
  17:Core/Src/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Core/Src/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  19:Core/Src/system_stm32f0xx.c ****   *                                 during program execution.
  20:Core/Src/system_stm32f0xx.c ****   *
  21:Core/Src/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Core/Src/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  23:Core/Src/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  24:Core/Src/system_stm32f0xx.c ****   *
  25:Core/Src/system_stm32f0xx.c ****   * 3. This file configures the system clock as follows:
  26:Core/Src/system_stm32f0xx.c ****   *=============================================================================
  27:Core/Src/system_stm32f0xx.c ****   *                         Supported STM32F0xx device
  28:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  29:Core/Src/system_stm32f0xx.c ****   *        System Clock source                    | HSI
  30:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  31:Core/Src/system_stm32f0xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  33:Core/Src/system_stm32f0xx.c ****   *        HCLK(Hz)                               | 8000000
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 2


  34:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  35:Core/Src/system_stm32f0xx.c ****   *        AHB Prescaler                          | 1
  36:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  37:Core/Src/system_stm32f0xx.c ****   *        APB1 Prescaler                         | 1
  38:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  39:Core/Src/system_stm32f0xx.c ****   *=============================================================================
  40:Core/Src/system_stm32f0xx.c ****   ******************************************************************************
  41:Core/Src/system_stm32f0xx.c ****   * @attention
  42:Core/Src/system_stm32f0xx.c ****   *
  43:Core/Src/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:Core/Src/system_stm32f0xx.c ****   *
  45:Core/Src/system_stm32f0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:Core/Src/system_stm32f0xx.c ****   * are permitted provided that the following conditions are met:
  47:Core/Src/system_stm32f0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:Core/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer.
  49:Core/Src/system_stm32f0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:Core/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:Core/Src/system_stm32f0xx.c ****   *      and/or other materials provided with the distribution.
  52:Core/Src/system_stm32f0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:Core/Src/system_stm32f0xx.c ****   *      may be used to endorse or promote products derived from this software
  54:Core/Src/system_stm32f0xx.c ****   *      without specific prior written permission.
  55:Core/Src/system_stm32f0xx.c ****   *
  56:Core/Src/system_stm32f0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:Core/Src/system_stm32f0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:Core/Src/system_stm32f0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:Core/Src/system_stm32f0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:Core/Src/system_stm32f0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:Core/Src/system_stm32f0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:Core/Src/system_stm32f0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:Core/Src/system_stm32f0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:Core/Src/system_stm32f0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:Core/Src/system_stm32f0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:Core/Src/system_stm32f0xx.c ****   *
  67:Core/Src/system_stm32f0xx.c ****   ******************************************************************************
  68:Core/Src/system_stm32f0xx.c ****   */
  69:Core/Src/system_stm32f0xx.c **** 
  70:Core/Src/system_stm32f0xx.c **** /** @addtogroup CMSIS
  71:Core/Src/system_stm32f0xx.c ****   * @{
  72:Core/Src/system_stm32f0xx.c ****   */
  73:Core/Src/system_stm32f0xx.c **** 
  74:Core/Src/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  75:Core/Src/system_stm32f0xx.c ****   * @{
  76:Core/Src/system_stm32f0xx.c ****   */
  77:Core/Src/system_stm32f0xx.c **** 
  78:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  79:Core/Src/system_stm32f0xx.c ****   * @{
  80:Core/Src/system_stm32f0xx.c ****   */
  81:Core/Src/system_stm32f0xx.c **** 
  82:Core/Src/system_stm32f0xx.c **** #include "stm32f0xx.h"
  83:Core/Src/system_stm32f0xx.c **** 
  84:Core/Src/system_stm32f0xx.c **** /**
  85:Core/Src/system_stm32f0xx.c ****   * @}
  86:Core/Src/system_stm32f0xx.c ****   */
  87:Core/Src/system_stm32f0xx.c **** 
  88:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
  89:Core/Src/system_stm32f0xx.c ****   * @{
  90:Core/Src/system_stm32f0xx.c ****   */
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 3


  91:Core/Src/system_stm32f0xx.c **** 
  92:Core/Src/system_stm32f0xx.c **** /**
  93:Core/Src/system_stm32f0xx.c ****   * @}
  94:Core/Src/system_stm32f0xx.c ****   */
  95:Core/Src/system_stm32f0xx.c **** 
  96:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
  97:Core/Src/system_stm32f0xx.c ****   * @{
  98:Core/Src/system_stm32f0xx.c ****   */
  99:Core/Src/system_stm32f0xx.c **** #if !defined  (HSE_VALUE) 
 100:Core/Src/system_stm32f0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 101:Core/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 102:Core/Src/system_stm32f0xx.c **** #endif /* HSE_VALUE */
 103:Core/Src/system_stm32f0xx.c **** 
 104:Core/Src/system_stm32f0xx.c **** #if !defined  (HSI_VALUE)
 105:Core/Src/system_stm32f0xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 106:Core/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 107:Core/Src/system_stm32f0xx.c **** #endif /* HSI_VALUE */
 108:Core/Src/system_stm32f0xx.c **** 
 109:Core/Src/system_stm32f0xx.c **** #if !defined (HSI48_VALUE)
 110:Core/Src/system_stm32f0xx.c **** #define HSI48_VALUE    ((uint32_t)48000000) /*!< Default value of the HSI48 Internal oscillator in 
 111:Core/Src/system_stm32f0xx.c ****                                                  This value can be provided and adapted by the user
 112:Core/Src/system_stm32f0xx.c **** #endif /* HSI48_VALUE */
 113:Core/Src/system_stm32f0xx.c **** /**
 114:Core/Src/system_stm32f0xx.c ****   * @}
 115:Core/Src/system_stm32f0xx.c ****   */
 116:Core/Src/system_stm32f0xx.c **** 
 117:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 118:Core/Src/system_stm32f0xx.c ****   * @{
 119:Core/Src/system_stm32f0xx.c ****   */
 120:Core/Src/system_stm32f0xx.c **** 
 121:Core/Src/system_stm32f0xx.c **** /**
 122:Core/Src/system_stm32f0xx.c ****   * @}
 123:Core/Src/system_stm32f0xx.c ****   */
 124:Core/Src/system_stm32f0xx.c **** 
 125:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 126:Core/Src/system_stm32f0xx.c ****   * @{
 127:Core/Src/system_stm32f0xx.c ****   */
 128:Core/Src/system_stm32f0xx.c ****   /* This variable is updated in three ways:
 129:Core/Src/system_stm32f0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 130:Core/Src/system_stm32f0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 131:Core/Src/system_stm32f0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 132:Core/Src/system_stm32f0xx.c ****          Note: If you use this function to configure the system clock there is no need to
 133:Core/Src/system_stm32f0xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 134:Core/Src/system_stm32f0xx.c ****                updated automatically.
 135:Core/Src/system_stm32f0xx.c ****   */
 136:Core/Src/system_stm32f0xx.c **** uint32_t SystemCoreClock = 8000000;
 137:Core/Src/system_stm32f0xx.c **** 
 138:Core/Src/system_stm32f0xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 139:Core/Src/system_stm32f0xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 140:Core/Src/system_stm32f0xx.c **** 
 141:Core/Src/system_stm32f0xx.c **** /**
 142:Core/Src/system_stm32f0xx.c ****   * @}
 143:Core/Src/system_stm32f0xx.c ****   */
 144:Core/Src/system_stm32f0xx.c **** 
 145:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
 146:Core/Src/system_stm32f0xx.c ****   * @{
 147:Core/Src/system_stm32f0xx.c ****   */
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 4


 148:Core/Src/system_stm32f0xx.c **** 
 149:Core/Src/system_stm32f0xx.c **** /**
 150:Core/Src/system_stm32f0xx.c ****   * @}
 151:Core/Src/system_stm32f0xx.c ****   */
 152:Core/Src/system_stm32f0xx.c **** 
 153:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 154:Core/Src/system_stm32f0xx.c ****   * @{
 155:Core/Src/system_stm32f0xx.c ****   */
 156:Core/Src/system_stm32f0xx.c **** 
 157:Core/Src/system_stm32f0xx.c **** /**
 158:Core/Src/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 159:Core/Src/system_stm32f0xx.c ****   *         Initialize the default HSI clock source, vector table location and the PLL configuratio
 160:Core/Src/system_stm32f0xx.c ****   * @param  None
 161:Core/Src/system_stm32f0xx.c ****   * @retval None
 162:Core/Src/system_stm32f0xx.c ****   */
 163:Core/Src/system_stm32f0xx.c **** void SystemInit(void)
 164:Core/Src/system_stm32f0xx.c **** {
  26              		.loc 1 164 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 165:Core/Src/system_stm32f0xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 166:Core/Src/system_stm32f0xx.c ****   /* Set HSION bit */
 167:Core/Src/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001U;
  31              		.loc 1 167 0
  32 0000 114B     		ldr	r3, .L2
  33 0002 1A68     		ldr	r2, [r3]
  34 0004 0121     		movs	r1, #1
  35 0006 0A43     		orrs	r2, r1
  36 0008 1A60     		str	r2, [r3]
 168:Core/Src/system_stm32f0xx.c **** 
 169:Core/Src/system_stm32f0xx.c **** #if defined (STM32F051x8) || defined (STM32F058x8)
 170:Core/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 171:Core/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 172:Core/Src/system_stm32f0xx.c **** #else
 173:Core/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 174:Core/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80CU;
  37              		.loc 1 174 0
  38 000a 5A68     		ldr	r2, [r3, #4]
  39 000c 0F48     		ldr	r0, .L2+4
  40 000e 0240     		ands	r2, r0
  41 0010 5A60     		str	r2, [r3, #4]
 175:Core/Src/system_stm32f0xx.c **** #endif /* STM32F051x8 or STM32F058x8 */
 176:Core/Src/system_stm32f0xx.c ****   
 177:Core/Src/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 178:Core/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFFU;
  42              		.loc 1 178 0
  43 0012 1A68     		ldr	r2, [r3]
  44 0014 0E48     		ldr	r0, .L2+8
  45 0016 0240     		ands	r2, r0
  46 0018 1A60     		str	r2, [r3]
 179:Core/Src/system_stm32f0xx.c **** 
 180:Core/Src/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 181:Core/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
  47              		.loc 1 181 0
  48 001a 1A68     		ldr	r2, [r3]
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 5


  49 001c 0D48     		ldr	r0, .L2+12
  50 001e 0240     		ands	r2, r0
  51 0020 1A60     		str	r2, [r3]
 182:Core/Src/system_stm32f0xx.c **** 
 183:Core/Src/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 184:Core/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
  52              		.loc 1 184 0
  53 0022 5A68     		ldr	r2, [r3, #4]
  54 0024 0C48     		ldr	r0, .L2+16
  55 0026 0240     		ands	r2, r0
  56 0028 5A60     		str	r2, [r3, #4]
 185:Core/Src/system_stm32f0xx.c **** 
 186:Core/Src/system_stm32f0xx.c ****   /* Reset PREDIV[3:0] bits */
 187:Core/Src/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
  57              		.loc 1 187 0
  58 002a DA6A     		ldr	r2, [r3, #44]
  59 002c 0F20     		movs	r0, #15
  60 002e 8243     		bics	r2, r0
  61 0030 DA62     		str	r2, [r3, #44]
 188:Core/Src/system_stm32f0xx.c **** 
 189:Core/Src/system_stm32f0xx.c **** #if defined (STM32F072xB) || defined (STM32F078xx)
 190:Core/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 191:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 192:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F071xB)
 193:Core/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 194:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
 195:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F091xC) || defined (STM32F098xx)
 196:Core/Src/system_stm32f0xx.c ****   /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 197:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 198:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038
 199:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
 200:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 201:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F051x8) || defined (STM32F058xx)
 202:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 203:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 204:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F042x6) || defined (STM32F048xx)
 205:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 206:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
  62              		.loc 1 206 0
  63 0032 1A6B     		ldr	r2, [r3, #48]
  64 0034 0948     		ldr	r0, .L2+20
  65 0036 0240     		ands	r2, r0
  66 0038 1A63     		str	r2, [r3, #48]
 207:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F070x6) || defined (STM32F070xB)
 208:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
 209:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 210:Core/Src/system_stm32f0xx.c ****   /* Set default USB clock to PLLCLK, since there is no HSI48 */
 211:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 |= (uint32_t)0x00000080U;  
 212:Core/Src/system_stm32f0xx.c **** #else
 213:Core/Src/system_stm32f0xx.c ****  #warning "No target selected"
 214:Core/Src/system_stm32f0xx.c **** #endif
 215:Core/Src/system_stm32f0xx.c **** 
 216:Core/Src/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 217:Core/Src/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
  67              		.loc 1 217 0
  68 003a 5A6B     		ldr	r2, [r3, #52]
  69 003c 8A43     		bics	r2, r1
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 6


  70 003e 5A63     		str	r2, [r3, #52]
 218:Core/Src/system_stm32f0xx.c **** 
 219:Core/Src/system_stm32f0xx.c ****   /* Disable all interrupts */
 220:Core/Src/system_stm32f0xx.c ****   RCC->CIR = 0x00000000U;
  71              		.loc 1 220 0
  72 0040 0022     		movs	r2, #0
  73 0042 9A60     		str	r2, [r3, #8]
 221:Core/Src/system_stm32f0xx.c **** 
 222:Core/Src/system_stm32f0xx.c **** }
  74              		.loc 1 222 0
  75              		@ sp needed
  76 0044 7047     		bx	lr
  77              	.L3:
  78 0046 C046     		.align	2
  79              	.L2:
  80 0048 00100240 		.word	1073876992
  81 004c 0CB8FF08 		.word	150976524
  82 0050 FFFFF6FE 		.word	-17367041
  83 0054 FFFFFBFF 		.word	-262145
  84 0058 FFFFC0FF 		.word	-4128769
  85 005c 2CFEFFFF 		.word	-468
  86              		.cfi_endproc
  87              	.LFE37:
  89              		.global	__aeabi_uidiv
  90              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  91              		.align	1
  92              		.global	SystemCoreClockUpdate
  93              		.syntax unified
  94              		.code	16
  95              		.thumb_func
  96              		.fpu softvfp
  98              	SystemCoreClockUpdate:
  99              	.LFB38:
 223:Core/Src/system_stm32f0xx.c **** 
 224:Core/Src/system_stm32f0xx.c **** /**
 225:Core/Src/system_stm32f0xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 226:Core/Src/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 227:Core/Src/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 228:Core/Src/system_stm32f0xx.c ****   *         other parameters.
 229:Core/Src/system_stm32f0xx.c ****   *
 230:Core/Src/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 231:Core/Src/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 232:Core/Src/system_stm32f0xx.c ****   *         based on this variable will be incorrect.
 233:Core/Src/system_stm32f0xx.c ****   *
 234:Core/Src/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real
 235:Core/Src/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 236:Core/Src/system_stm32f0xx.c ****   *           constant and the selected clock source:
 237:Core/Src/system_stm32f0xx.c ****   *
 238:Core/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 239:Core/Src/system_stm32f0xx.c ****   *
 240:Core/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 241:Core/Src/system_stm32f0xx.c ****   *
 242:Core/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 243:Core/Src/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 244:Core/Src/system_stm32f0xx.c ****   *
 245:Core/Src/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 246:Core/Src/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 7


 247:Core/Src/system_stm32f0xx.c ****   *             in voltage and temperature.
 248:Core/Src/system_stm32f0xx.c ****   *
 249:Core/Src/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 250:Core/Src/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 251:Core/Src/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 252:Core/Src/system_stm32f0xx.c ****   *              have wrong result.
 253:Core/Src/system_stm32f0xx.c ****   *
 254:Core/Src/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 255:Core/Src/system_stm32f0xx.c ****   *           value for HSE crystal.
 256:Core/Src/system_stm32f0xx.c ****   *
 257:Core/Src/system_stm32f0xx.c ****   * @param  None
 258:Core/Src/system_stm32f0xx.c ****   * @retval None
 259:Core/Src/system_stm32f0xx.c ****   */
 260:Core/Src/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 261:Core/Src/system_stm32f0xx.c **** {
 100              		.loc 1 261 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104 0000 10B5     		push	{r4, lr}
 105              	.LCFI0:
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 4, -8
 108              		.cfi_offset 14, -4
 109              	.LVL0:
 262:Core/Src/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 263:Core/Src/system_stm32f0xx.c **** 
 264:Core/Src/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 265:Core/Src/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 110              		.loc 1 265 0
 111 0002 254B     		ldr	r3, .L16
 112 0004 5A68     		ldr	r2, [r3, #4]
 113 0006 0C23     		movs	r3, #12
 114 0008 1340     		ands	r3, r2
 115              	.LVL1:
 266:Core/Src/system_stm32f0xx.c **** 
 267:Core/Src/system_stm32f0xx.c ****   switch (tmp)
 116              		.loc 1 267 0
 117 000a 042B     		cmp	r3, #4
 118 000c 16D0     		beq	.L6
 119 000e 082B     		cmp	r3, #8
 120 0010 18D0     		beq	.L7
 121 0012 002B     		cmp	r3, #0
 122 0014 03D0     		beq	.L13
 268:Core/Src/system_stm32f0xx.c ****   {
 269:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 270:Core/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 271:Core/Src/system_stm32f0xx.c ****       break;
 272:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 273:Core/Src/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 274:Core/Src/system_stm32f0xx.c ****       break;
 275:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 276:Core/Src/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 277:Core/Src/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 278:Core/Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 279:Core/Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 280:Core/Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 8


 281:Core/Src/system_stm32f0xx.c **** 
 282:Core/Src/system_stm32f0xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 283:Core/Src/system_stm32f0xx.c ****       {
 284:Core/Src/system_stm32f0xx.c ****         /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
 285:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 286:Core/Src/system_stm32f0xx.c ****       }
 287:Core/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) ||
 288:Core/Src/system_stm32f0xx.c ****       else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 289:Core/Src/system_stm32f0xx.c ****       {
 290:Core/Src/system_stm32f0xx.c ****         /* HSI48 used as PLL clock source : SystemCoreClock = HSI48/PREDIV * PLLMUL */
 291:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 292:Core/Src/system_stm32f0xx.c ****       }
 293:Core/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx */
 294:Core/Src/system_stm32f0xx.c ****       else
 295:Core/Src/system_stm32f0xx.c ****       {
 296:Core/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx)  || defined(STM32F070x6) \
 297:Core/Src/system_stm32f0xx.c ****  || defined(STM32F078xx) || defined(STM32F071xB)  || defined(STM32F072xB) \
 298:Core/Src/system_stm32f0xx.c ****  || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx)  || defined(STM32F030xC)
 299:Core/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/PREDIV * PLLMUL */
 300:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 301:Core/Src/system_stm32f0xx.c **** #else
 302:Core/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/2 * PLLMUL */
 303:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 304:Core/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
 305:Core/Src/system_stm32f0xx.c ****           STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
 306:Core/Src/system_stm32f0xx.c ****           STM32F091xC || STM32F098xx || STM32F030xC */
 307:Core/Src/system_stm32f0xx.c ****       }
 308:Core/Src/system_stm32f0xx.c ****       break;
 309:Core/Src/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 310:Core/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 123              		.loc 1 310 0
 124 0016 214B     		ldr	r3, .L16+4
 125              	.LVL2:
 126 0018 214A     		ldr	r2, .L16+8
 127              	.LVL3:
 128 001a 1A60     		str	r2, [r3]
 311:Core/Src/system_stm32f0xx.c ****       break;
 129              		.loc 1 311 0
 130 001c 02E0     		b	.L9
 131              	.LVL4:
 132              	.L13:
 270:Core/Src/system_stm32f0xx.c ****       break;
 133              		.loc 1 270 0
 134 001e 1F4B     		ldr	r3, .L16+4
 135              	.LVL5:
 136 0020 1F4A     		ldr	r2, .L16+8
 137              	.LVL6:
 138 0022 1A60     		str	r2, [r3]
 139              	.LVL7:
 140              	.L9:
 312:Core/Src/system_stm32f0xx.c ****   }
 313:Core/Src/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 314:Core/Src/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 315:Core/Src/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 141              		.loc 1 315 0
 142 0024 1C4B     		ldr	r3, .L16
 143 0026 5A68     		ldr	r2, [r3, #4]
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 9


 144 0028 1209     		lsrs	r2, r2, #4
 145 002a 0F23     		movs	r3, #15
 146 002c 1340     		ands	r3, r2
 147 002e 1D4A     		ldr	r2, .L16+12
 148 0030 D35C     		ldrb	r3, [r2, r3]
 149              	.LVL8:
 316:Core/Src/system_stm32f0xx.c ****   /* HCLK clock frequency */
 317:Core/Src/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;
 150              		.loc 1 317 0
 151 0032 1A4A     		ldr	r2, .L16+4
 152 0034 1168     		ldr	r1, [r2]
 153 0036 D940     		lsrs	r1, r1, r3
 154 0038 1160     		str	r1, [r2]
 318:Core/Src/system_stm32f0xx.c **** }
 155              		.loc 1 318 0
 156              		@ sp needed
 157 003a 10BD     		pop	{r4, pc}
 158              	.LVL9:
 159              	.L6:
 273:Core/Src/system_stm32f0xx.c ****       break;
 160              		.loc 1 273 0
 161 003c 174B     		ldr	r3, .L16+4
 162              	.LVL10:
 163 003e 184A     		ldr	r2, .L16+8
 164              	.LVL11:
 165 0040 1A60     		str	r2, [r3]
 274:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 166              		.loc 1 274 0
 167 0042 EFE7     		b	.L9
 168              	.LVL12:
 169              	.L7:
 277:Core/Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 170              		.loc 1 277 0
 171 0044 144A     		ldr	r2, .L16
 172 0046 5068     		ldr	r0, [r2, #4]
 173              	.LVL13:
 278:Core/Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 174              		.loc 1 278 0
 175 0048 5368     		ldr	r3, [r2, #4]
 176              	.LVL14:
 177 004a C021     		movs	r1, #192
 178 004c 4902     		lsls	r1, r1, #9
 179 004e 0B40     		ands	r3, r1
 180              	.LVL15:
 279:Core/Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 181              		.loc 1 279 0
 182 0050 800C     		lsrs	r0, r0, #18
 183              	.LVL16:
 184 0052 0F21     		movs	r1, #15
 185 0054 0840     		ands	r0, r1
 186 0056 841C     		adds	r4, r0, #2
 187              	.LVL17:
 280:Core/Src/system_stm32f0xx.c **** 
 188              		.loc 1 280 0
 189 0058 D26A     		ldr	r2, [r2, #44]
 190 005a 1140     		ands	r1, r2
 191 005c 0131     		adds	r1, r1, #1
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 10


 192              	.LVL18:
 282:Core/Src/system_stm32f0xx.c ****       {
 193              		.loc 1 282 0
 194 005e 8022     		movs	r2, #128
 195 0060 5202     		lsls	r2, r2, #9
 196 0062 9342     		cmp	r3, r2
 197 0064 0AD0     		beq	.L14
 288:Core/Src/system_stm32f0xx.c ****       {
 198              		.loc 1 288 0
 199 0066 C022     		movs	r2, #192
 200 0068 5202     		lsls	r2, r2, #9
 201 006a 9342     		cmp	r3, r2
 202 006c 0DD0     		beq	.L15
 300:Core/Src/system_stm32f0xx.c **** #else
 203              		.loc 1 300 0
 204 006e 0C48     		ldr	r0, .L16+8
 205 0070 FFF7FEFF 		bl	__aeabi_uidiv
 206              	.LVL19:
 207 0074 6043     		muls	r0, r4
 208 0076 094B     		ldr	r3, .L16+4
 209 0078 1860     		str	r0, [r3]
 210 007a D3E7     		b	.L9
 211              	.LVL20:
 212              	.L14:
 285:Core/Src/system_stm32f0xx.c ****       }
 213              		.loc 1 285 0
 214 007c 0848     		ldr	r0, .L16+8
 215 007e FFF7FEFF 		bl	__aeabi_uidiv
 216              	.LVL21:
 217 0082 6043     		muls	r0, r4
 218 0084 054B     		ldr	r3, .L16+4
 219 0086 1860     		str	r0, [r3]
 220 0088 CCE7     		b	.L9
 221              	.LVL22:
 222              	.L15:
 291:Core/Src/system_stm32f0xx.c ****       }
 223              		.loc 1 291 0
 224 008a 0748     		ldr	r0, .L16+16
 225 008c FFF7FEFF 		bl	__aeabi_uidiv
 226              	.LVL23:
 227 0090 6043     		muls	r0, r4
 228 0092 024B     		ldr	r3, .L16+4
 229 0094 1860     		str	r0, [r3]
 230 0096 C5E7     		b	.L9
 231              	.L17:
 232              		.align	2
 233              	.L16:
 234 0098 00100240 		.word	1073876992
 235 009c 00000000 		.word	.LANCHOR0
 236 00a0 00127A00 		.word	8000000
 237 00a4 00000000 		.word	.LANCHOR1
 238 00a8 006CDC02 		.word	48000000
 239              		.cfi_endproc
 240              	.LFE38:
 242              		.global	APBPrescTable
 243              		.global	AHBPrescTable
 244              		.global	SystemCoreClock
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 11


 245              		.section	.data.SystemCoreClock,"aw",%progbits
 246              		.align	2
 247              		.set	.LANCHOR0,. + 0
 250              	SystemCoreClock:
 251 0000 00127A00 		.word	8000000
 252              		.section	.rodata.AHBPrescTable,"a",%progbits
 253              		.align	2
 254              		.set	.LANCHOR1,. + 0
 257              	AHBPrescTable:
 258 0000 00       		.byte	0
 259 0001 00       		.byte	0
 260 0002 00       		.byte	0
 261 0003 00       		.byte	0
 262 0004 00       		.byte	0
 263 0005 00       		.byte	0
 264 0006 00       		.byte	0
 265 0007 00       		.byte	0
 266 0008 01       		.byte	1
 267 0009 02       		.byte	2
 268 000a 03       		.byte	3
 269 000b 04       		.byte	4
 270 000c 06       		.byte	6
 271 000d 07       		.byte	7
 272 000e 08       		.byte	8
 273 000f 09       		.byte	9
 274              		.section	.rodata.APBPrescTable,"a",%progbits
 275              		.align	2
 278              	APBPrescTable:
 279 0000 00       		.byte	0
 280 0001 00       		.byte	0
 281 0002 00       		.byte	0
 282 0003 00       		.byte	0
 283 0004 01       		.byte	1
 284 0005 02       		.byte	2
 285 0006 03       		.byte	3
 286 0007 04       		.byte	4
 287              		.text
 288              	.Letext0:
 289              		.file 2 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 290              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 291              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 292              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 293              		.file 6 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 294              		.file 7 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 295              		.file 8 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 296              		.file 9 "d:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
ARM GAS  E:\cygwin64\tmp\ccVJIeaK.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f0xx.c
E:\cygwin64\tmp\ccVJIeaK.s:16     .text.SystemInit:00000000 $t
E:\cygwin64\tmp\ccVJIeaK.s:23     .text.SystemInit:00000000 SystemInit
E:\cygwin64\tmp\ccVJIeaK.s:80     .text.SystemInit:00000048 $d
E:\cygwin64\tmp\ccVJIeaK.s:91     .text.SystemCoreClockUpdate:00000000 $t
E:\cygwin64\tmp\ccVJIeaK.s:98     .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
E:\cygwin64\tmp\ccVJIeaK.s:234    .text.SystemCoreClockUpdate:00000098 $d
E:\cygwin64\tmp\ccVJIeaK.s:278    .rodata.APBPrescTable:00000000 APBPrescTable
E:\cygwin64\tmp\ccVJIeaK.s:257    .rodata.AHBPrescTable:00000000 AHBPrescTable
E:\cygwin64\tmp\ccVJIeaK.s:250    .data.SystemCoreClock:00000000 SystemCoreClock
E:\cygwin64\tmp\ccVJIeaK.s:246    .data.SystemCoreClock:00000000 $d
E:\cygwin64\tmp\ccVJIeaK.s:253    .rodata.AHBPrescTable:00000000 $d
E:\cygwin64\tmp\ccVJIeaK.s:275    .rodata.APBPrescTable:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
